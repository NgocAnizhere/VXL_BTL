
BTL1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d50  08003d50  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08003d50  08003d50  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d50  08003d50  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08003d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000bc  08003e14  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003e14  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a87  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253d  00000000  00000000  00030b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000330b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00033e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d11  00000000  00000000  00034a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ddb  00000000  00000000  0004d749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2cf  00000000  00000000  0005e524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e97f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000e9848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ca4 	.word	0x08003ca4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08003ca4 	.word	0x08003ca4

0800014c <isButton1Pressed>:
int KeyReg2 = NORMAL_STATE;

int KeyReg3 = NORMAL_STATE;
int TimerForKeyPress = 200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000d8 	.word	0x200000d8

08000170 <isButton2Pressed>:
int KeyReg2_2 = NORMAL_STATE;

int KeyReg3_2 = NORMAL_STATE;
int TimerForKeyPress_2 = 200;

int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000dc 	.word	0x200000dc

08000194 <isButton3Pressed>:
int KeyReg2_3 = NORMAL_STATE;

int KeyReg3_3 = NORMAL_STATE;
int TimerForKeyPress_3 = 200;

int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000e0 	.word	0x200000e0

080001b8 <subKeyProcess>:
//Button3


void subKeyProcess(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	200000d8 	.word	0x200000d8

080001d0 <subKeyProcess_2>:

void subKeyProcess_2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess_2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	200000dc 	.word	0x200000dc

080001e8 <subKeyProcess_3>:

void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	200000e0 	.word	0x200000e0

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000204:	4b5a      	ldr	r3, [pc, #360]	; (8000370 <getKeyInput+0x170>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a5a      	ldr	r2, [pc, #360]	; (8000374 <getKeyInput+0x174>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800020c:	4b5a      	ldr	r3, [pc, #360]	; (8000378 <getKeyInput+0x178>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a57      	ldr	r2, [pc, #348]	; (8000370 <getKeyInput+0x170>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	2108      	movs	r1, #8
 8000216:	4859      	ldr	r0, [pc, #356]	; (800037c <getKeyInput+0x17c>)
 8000218:	f001 fc08 	bl	8001a2c <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b55      	ldr	r3, [pc, #340]	; (8000378 <getKeyInput+0x178>)
 8000222:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000224:	4b53      	ldr	r3, [pc, #332]	; (8000374 <getKeyInput+0x174>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b51      	ldr	r3, [pc, #324]	; (8000370 <getKeyInput+0x170>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d125      	bne.n	800027c <getKeyInput+0x7c>
 8000230:	4b4f      	ldr	r3, [pc, #316]	; (8000370 <getKeyInput+0x170>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b50      	ldr	r3, [pc, #320]	; (8000378 <getKeyInput+0x178>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d11f      	bne.n	800027c <getKeyInput+0x7c>
		if(KeyReg3 != KeyReg2){
 800023c:	4b50      	ldr	r3, [pc, #320]	; (8000380 <getKeyInput+0x180>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b4d      	ldr	r3, [pc, #308]	; (8000378 <getKeyInput+0x178>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00d      	beq.n	8000264 <getKeyInput+0x64>
            KeyReg3 = KeyReg2;
 8000248:	4b4b      	ldr	r3, [pc, #300]	; (8000378 <getKeyInput+0x178>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a4c      	ldr	r2, [pc, #304]	; (8000380 <getKeyInput+0x180>)
 800024e:	6013      	str	r3, [r2, #0]
            if(KeyReg2 == PRESSED_STATE){
 8000250:	4b49      	ldr	r3, [pc, #292]	; (8000378 <getKeyInput+0x178>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d111      	bne.n	800027c <getKeyInput+0x7c>
            	//TODO
            	subKeyProcess();
 8000258:	f7ff ffae 	bl	80001b8 <subKeyProcess>
            	TimerForKeyPress = 200;
 800025c:	4b49      	ldr	r3, [pc, #292]	; (8000384 <getKeyInput+0x184>)
 800025e:	22c8      	movs	r2, #200	; 0xc8
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	e00b      	b.n	800027c <getKeyInput+0x7c>
            }
		}else{
			TimerForKeyPress--;
 8000264:	4b47      	ldr	r3, [pc, #284]	; (8000384 <getKeyInput+0x184>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	3b01      	subs	r3, #1
 800026a:	4a46      	ldr	r2, [pc, #280]	; (8000384 <getKeyInput+0x184>)
 800026c:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 800026e:	4b45      	ldr	r3, [pc, #276]	; (8000384 <getKeyInput+0x184>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d102      	bne.n	800027c <getKeyInput+0x7c>
				//TODO
				KeyReg3 = NORMAL_STATE;
 8000276:	4b42      	ldr	r3, [pc, #264]	; (8000380 <getKeyInput+0x180>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	KeyReg0_2 = KeyReg1_2;
 800027c:	4b42      	ldr	r3, [pc, #264]	; (8000388 <getKeyInput+0x188>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a42      	ldr	r2, [pc, #264]	; (800038c <getKeyInput+0x18c>)
 8000282:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <getKeyInput+0x190>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a3f      	ldr	r2, [pc, #252]	; (8000388 <getKeyInput+0x188>)
 800028a:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800028c:	2120      	movs	r1, #32
 800028e:	483b      	ldr	r0, [pc, #236]	; (800037c <getKeyInput+0x17c>)
 8000290:	f001 fbcc 	bl	8001a2c <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <getKeyInput+0x190>)
 800029a:	601a      	str	r2, [r3, #0]
	if((KeyReg0_2 == KeyReg1_2) && (KeyReg1_2 == KeyReg2_2)){
 800029c:	4b3b      	ldr	r3, [pc, #236]	; (800038c <getKeyInput+0x18c>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b39      	ldr	r3, [pc, #228]	; (8000388 <getKeyInput+0x188>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d125      	bne.n	80002f4 <getKeyInput+0xf4>
 80002a8:	4b37      	ldr	r3, [pc, #220]	; (8000388 <getKeyInput+0x188>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <getKeyInput+0x190>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d11f      	bne.n	80002f4 <getKeyInput+0xf4>
		if(KeyReg3_2 != KeyReg2_2){
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <getKeyInput+0x194>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b35      	ldr	r3, [pc, #212]	; (8000390 <getKeyInput+0x190>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d00d      	beq.n	80002dc <getKeyInput+0xdc>
            KeyReg3_2 = KeyReg2_2;
 80002c0:	4b33      	ldr	r3, [pc, #204]	; (8000390 <getKeyInput+0x190>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a33      	ldr	r2, [pc, #204]	; (8000394 <getKeyInput+0x194>)
 80002c6:	6013      	str	r3, [r2, #0]
            if(KeyReg2_2 == PRESSED_STATE){
 80002c8:	4b31      	ldr	r3, [pc, #196]	; (8000390 <getKeyInput+0x190>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d111      	bne.n	80002f4 <getKeyInput+0xf4>
            	//TODO
            	subKeyProcess_2();
 80002d0:	f7ff ff7e 	bl	80001d0 <subKeyProcess_2>
            	TimerForKeyPress_2 = 200;
 80002d4:	4b30      	ldr	r3, [pc, #192]	; (8000398 <getKeyInput+0x198>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e00b      	b.n	80002f4 <getKeyInput+0xf4>
            }
		}else{
			TimerForKeyPress_2--;
 80002dc:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <getKeyInput+0x198>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <getKeyInput+0x198>)
 80002e4:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_2 == 0){
 80002e6:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <getKeyInput+0x198>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <getKeyInput+0xf4>
				//TODO
				KeyReg3_2 = NORMAL_STATE;
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <getKeyInput+0x194>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
			}
		}
	}

	KeyReg0_3 = KeyReg1_3;
 80002f4:	4b29      	ldr	r3, [pc, #164]	; (800039c <getKeyInput+0x19c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a29      	ldr	r2, [pc, #164]	; (80003a0 <getKeyInput+0x1a0>)
 80002fa:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 80002fc:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <getKeyInput+0x1a4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a26      	ldr	r2, [pc, #152]	; (800039c <getKeyInput+0x19c>)
 8000302:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000304:	2110      	movs	r1, #16
 8000306:	481d      	ldr	r0, [pc, #116]	; (800037c <getKeyInput+0x17c>)
 8000308:	f001 fb90 	bl	8001a2c <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <getKeyInput+0x1a4>)
 8000312:	601a      	str	r2, [r3, #0]
	if((KeyReg0_3 == KeyReg1_3) && (KeyReg1_3 == KeyReg2_3)){
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <getKeyInput+0x1a0>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <getKeyInput+0x19c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	429a      	cmp	r2, r3
 800031e:	d125      	bne.n	800036c <getKeyInput+0x16c>
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <getKeyInput+0x19c>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <getKeyInput+0x1a4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d11f      	bne.n	800036c <getKeyInput+0x16c>
		if(KeyReg3_3 != KeyReg2_3){
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <getKeyInput+0x1a8>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <getKeyInput+0x1a4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	429a      	cmp	r2, r3
 8000336:	d00d      	beq.n	8000354 <getKeyInput+0x154>
            KeyReg3_3 = KeyReg2_3;
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <getKeyInput+0x1a4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <getKeyInput+0x1a8>)
 800033e:	6013      	str	r3, [r2, #0]
            if(KeyReg2_3 == PRESSED_STATE){
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <getKeyInput+0x1a4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d111      	bne.n	800036c <getKeyInput+0x16c>
            	//TODO
            	subKeyProcess_3();
 8000348:	f7ff ff4e 	bl	80001e8 <subKeyProcess_3>
            	TimerForKeyPress_3 = 200;
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <getKeyInput+0x1ac>)
 800034e:	22c8      	movs	r2, #200	; 0xc8
 8000350:	601a      	str	r2, [r3, #0]
				KeyReg3_3 = NORMAL_STATE;
			}
		}
	}

}
 8000352:	e00b      	b.n	800036c <getKeyInput+0x16c>
			TimerForKeyPress_3--;
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <getKeyInput+0x1ac>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <getKeyInput+0x1ac>)
 800035c:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress_3 == 0){
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <getKeyInput+0x1ac>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d102      	bne.n	800036c <getKeyInput+0x16c>
				KeyReg3_3 = NORMAL_STATE;
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <getKeyInput+0x1a8>)
 8000368:	2201      	movs	r2, #1
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000004 	.word	0x20000004
 8000374:	20000000 	.word	0x20000000
 8000378:	20000008 	.word	0x20000008
 800037c:	40010c00 	.word	0x40010c00
 8000380:	2000000c 	.word	0x2000000c
 8000384:	20000010 	.word	0x20000010
 8000388:	20000018 	.word	0x20000018
 800038c:	20000014 	.word	0x20000014
 8000390:	2000001c 	.word	0x2000001c
 8000394:	20000020 	.word	0x20000020
 8000398:	20000024 	.word	0x20000024
 800039c:	2000002c 	.word	0x2000002c
 80003a0:	20000028 	.word	0x20000028
 80003a4:	20000030 	.word	0x20000030
 80003a8:	20000034 	.word	0x20000034
 80003ac:	20000038 	.word	0x20000038

080003b0 <fsm_automatic_run>:


const int MAX_LED1 = 4;
int index_led1 = 0;

void fsm_automatic_run(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	switch(status){
 80003b4:	4bb7      	ldr	r3, [pc, #732]	; (8000694 <fsm_automatic_run+0x2e4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	f200 829f 	bhi.w	80008fe <fsm_automatic_run+0x54e>
 80003c0:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <fsm_automatic_run+0x18>)
 80003c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c6:	bf00      	nop
 80003c8:	080003dd 	.word	0x080003dd
 80003cc:	08000477 	.word	0x08000477
 80003d0:	08000581 	.word	0x08000581
 80003d4:	080006e5 	.word	0x080006e5
 80003d8:	080007ef 	.word	0x080007ef
	case INIT:
		//TODO
		HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	48ad      	ldr	r0, [pc, #692]	; (8000698 <fsm_automatic_run+0x2e8>)
 80003e4:	f001 fb39 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ee:	48aa      	ldr	r0, [pc, #680]	; (8000698 <fsm_automatic_run+0x2e8>)
 80003f0:	f001 fb33 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	48a8      	ldr	r0, [pc, #672]	; (800069c <fsm_automatic_run+0x2ec>)
 80003fa:	f001 fb2e 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	48a7      	ldr	r0, [pc, #668]	; (80006a0 <fsm_automatic_run+0x2f0>)
 8000404:	f001 fb29 	bl	8001a5a <HAL_GPIO_WritePin>



		status = State1;
 8000408:	4ba2      	ldr	r3, [pc, #648]	; (8000694 <fsm_automatic_run+0x2e4>)
 800040a:	2202      	movs	r2, #2
 800040c:	601a      	str	r2, [r3, #0]
		setTimer1(greenTime);
 800040e:	4ba5      	ldr	r3, [pc, #660]	; (80006a4 <fsm_automatic_run+0x2f4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fe62 	bl	80010dc <setTimer1>
		setTimer2(100);
 8000418:	2064      	movs	r0, #100	; 0x64
 800041a:	f000 fea1 	bl	8001160 <setTimer2>
		tmpTimeRed = redTime;
 800041e:	4ba2      	ldr	r3, [pc, #648]	; (80006a8 <fsm_automatic_run+0x2f8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4aa2      	ldr	r2, [pc, #648]	; (80006ac <fsm_automatic_run+0x2fc>)
 8000424:	6013      	str	r3, [r2, #0]
		tmpTimeYellow = yellowTime;
 8000426:	4ba2      	ldr	r3, [pc, #648]	; (80006b0 <fsm_automatic_run+0x300>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4aa2      	ldr	r2, [pc, #648]	; (80006b4 <fsm_automatic_run+0x304>)
 800042c:	6013      	str	r3, [r2, #0]
		tmpTimeGreen = greenTime;
 800042e:	4b9d      	ldr	r3, [pc, #628]	; (80006a4 <fsm_automatic_run+0x2f4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4aa1      	ldr	r2, [pc, #644]	; (80006b8 <fsm_automatic_run+0x308>)
 8000434:	6013      	str	r3, [r2, #0]
		tmpTimeRed1 = redTime;
 8000436:	4b9c      	ldr	r3, [pc, #624]	; (80006a8 <fsm_automatic_run+0x2f8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4aa0      	ldr	r2, [pc, #640]	; (80006bc <fsm_automatic_run+0x30c>)
 800043c:	6013      	str	r3, [r2, #0]
		tmpTimeYellow1 = yellowTime;
 800043e:	4b9c      	ldr	r3, [pc, #624]	; (80006b0 <fsm_automatic_run+0x300>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a9f      	ldr	r2, [pc, #636]	; (80006c0 <fsm_automatic_run+0x310>)
 8000444:	6013      	str	r3, [r2, #0]
		tmpTimeGreen1 = greenTime;
 8000446:	4b97      	ldr	r3, [pc, #604]	; (80006a4 <fsm_automatic_run+0x2f4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a9e      	ldr	r2, [pc, #632]	; (80006c4 <fsm_automatic_run+0x314>)
 800044c:	6013      	str	r3, [r2, #0]

		if(redTime !=  greenTime + yellowTime){
 800044e:	4b95      	ldr	r3, [pc, #596]	; (80006a4 <fsm_automatic_run+0x2f4>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b97      	ldr	r3, [pc, #604]	; (80006b0 <fsm_automatic_run+0x300>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	441a      	add	r2, r3
 8000458:	4b93      	ldr	r3, [pc, #588]	; (80006a8 <fsm_automatic_run+0x2f8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	f000 8250 	beq.w	8000902 <fsm_automatic_run+0x552>
					mode = 2;
 8000462:	4b99      	ldr	r3, [pc, #612]	; (80006c8 <fsm_automatic_run+0x318>)
 8000464:	2202      	movs	r2, #2
 8000466:	601a      	str	r2, [r3, #0]
					status = MAN_RED;
 8000468:	4b8a      	ldr	r3, [pc, #552]	; (8000694 <fsm_automatic_run+0x2e4>)
 800046a:	220c      	movs	r2, #12
 800046c:	601a      	str	r2, [r3, #0]
					setTimer1(50);
 800046e:	2032      	movs	r0, #50	; 0x32
 8000470:	f000 fe34 	bl	80010dc <setTimer1>
				}
		break;
 8000474:	e245      	b.n	8000902 <fsm_automatic_run+0x552>
	case State1:
		//TODO


			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4886      	ldr	r0, [pc, #536]	; (8000698 <fsm_automatic_run+0x2e8>)
 800047e:	f001 faec 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 1);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	4883      	ldr	r0, [pc, #524]	; (8000698 <fsm_automatic_run+0x2e8>)
 800048a:	f001 fae6 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 1);
 800048e:	2201      	movs	r2, #1
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	4882      	ldr	r0, [pc, #520]	; (800069c <fsm_automatic_run+0x2ec>)
 8000494:	f001 fae1 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4880      	ldr	r0, [pc, #512]	; (80006a0 <fsm_automatic_run+0x2f0>)
 800049e:	f001 fadc 	bl	8001a5a <HAL_GPIO_WritePin>



		if (timer2_flag == 1){
 80004a2:	4b8a      	ldr	r3, [pc, #552]	; (80006cc <fsm_automatic_run+0x31c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d132      	bne.n	8000510 <fsm_automatic_run+0x160>
			lcd_clear_display ();
 80004aa:	f000 fc83 	bl	8000db4 <lcd_clear_display>

			lcd_goto_XY(0, 0);
 80004ae:	2100      	movs	r1, #0
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fc89 	bl	8000dc8 <lcd_goto_XY>
			lcd_send_string("Red: ");
 80004b6:	4886      	ldr	r0, [pc, #536]	; (80006d0 <fsm_automatic_run+0x320>)
 80004b8:	f000 fc50 	bl	8000d5c <lcd_send_string>
			lcd_send_num(tmpTimeRed1/100);
 80004bc:	4b7f      	ldr	r3, [pc, #508]	; (80006bc <fsm_automatic_run+0x30c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a84      	ldr	r2, [pc, #528]	; (80006d4 <fsm_automatic_run+0x324>)
 80004c2:	fb82 1203 	smull	r1, r2, r2, r3
 80004c6:	1152      	asrs	r2, r2, #5
 80004c8:	17db      	asrs	r3, r3, #31
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 fc5b 	bl	8000d88 <lcd_send_num>
			lcd_goto_XY(1, 0);
 80004d2:	2100      	movs	r1, #0
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 fc77 	bl	8000dc8 <lcd_goto_XY>
			lcd_send_string("Green: ");
 80004da:	487f      	ldr	r0, [pc, #508]	; (80006d8 <fsm_automatic_run+0x328>)
 80004dc:	f000 fc3e 	bl	8000d5c <lcd_send_string>
			lcd_send_num(tmpTimeGreen1/100);
 80004e0:	4b78      	ldr	r3, [pc, #480]	; (80006c4 <fsm_automatic_run+0x314>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a7b      	ldr	r2, [pc, #492]	; (80006d4 <fsm_automatic_run+0x324>)
 80004e6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ea:	1152      	asrs	r2, r2, #5
 80004ec:	17db      	asrs	r3, r3, #31
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fc49 	bl	8000d88 <lcd_send_num>

			tmpTimeRed1 = tmpTimeRed1 -100;
 80004f6:	4b71      	ldr	r3, [pc, #452]	; (80006bc <fsm_automatic_run+0x30c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3b64      	subs	r3, #100	; 0x64
 80004fc:	4a6f      	ldr	r2, [pc, #444]	; (80006bc <fsm_automatic_run+0x30c>)
 80004fe:	6013      	str	r3, [r2, #0]
			tmpTimeGreen1 = tmpTimeGreen1 -100;
 8000500:	4b70      	ldr	r3, [pc, #448]	; (80006c4 <fsm_automatic_run+0x314>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3b64      	subs	r3, #100	; 0x64
 8000506:	4a6f      	ldr	r2, [pc, #444]	; (80006c4 <fsm_automatic_run+0x314>)
 8000508:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fe28 	bl	8001160 <setTimer2>
		}


		if(timer1_flag == 1 ){
 8000510:	4b72      	ldr	r3, [pc, #456]	; (80006dc <fsm_automatic_run+0x32c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10b      	bne.n	8000530 <fsm_automatic_run+0x180>
			tmpTimeGreen1 = greenTime;
 8000518:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <fsm_automatic_run+0x2f4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a69      	ldr	r2, [pc, #420]	; (80006c4 <fsm_automatic_run+0x314>)
 800051e:	6013      	str	r3, [r2, #0]
			status = State2;
 8000520:	4b5c      	ldr	r3, [pc, #368]	; (8000694 <fsm_automatic_run+0x2e4>)
 8000522:	2203      	movs	r2, #3
 8000524:	601a      	str	r2, [r3, #0]
			setTimer1(yellowTime);
 8000526:	4b62      	ldr	r3, [pc, #392]	; (80006b0 <fsm_automatic_run+0x300>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fdd6 	bl	80010dc <setTimer1>
		}

		if(isButton1Pressed() == 1){
 8000530:	f7ff fe0c 	bl	800014c <isButton1Pressed>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	f040 81e5 	bne.w	8000906 <fsm_automatic_run+0x556>
			mode = 2;
 800053c:	4b62      	ldr	r3, [pc, #392]	; (80006c8 <fsm_automatic_run+0x318>)
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4853      	ldr	r0, [pc, #332]	; (8000698 <fsm_automatic_run+0x2e8>)
 800054a:	f001 fa86 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	4850      	ldr	r0, [pc, #320]	; (8000698 <fsm_automatic_run+0x2e8>)
 8000556:	f001 fa80 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	484f      	ldr	r0, [pc, #316]	; (800069c <fsm_automatic_run+0x2ec>)
 8000560:	f001 fa7b 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	484d      	ldr	r0, [pc, #308]	; (80006a0 <fsm_automatic_run+0x2f0>)
 800056a:	f001 fa76 	bl	8001a5a <HAL_GPIO_WritePin>

			lcd_clear_display();
 800056e:	f000 fc21 	bl	8000db4 <lcd_clear_display>

			status = MAN_RED;
 8000572:	4b48      	ldr	r3, [pc, #288]	; (8000694 <fsm_automatic_run+0x2e4>)
 8000574:	220c      	movs	r2, #12
 8000576:	601a      	str	r2, [r3, #0]


			setTimer1(50);
 8000578:	2032      	movs	r0, #50	; 0x32
 800057a:	f000 fdaf 	bl	80010dc <setTimer1>
		}



		break;
 800057e:	e1c2      	b.n	8000906 <fsm_automatic_run+0x556>
	case State2:
		//TODO
		HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000586:	4844      	ldr	r0, [pc, #272]	; (8000698 <fsm_automatic_run+0x2e8>)
 8000588:	f001 fa67 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000592:	4841      	ldr	r0, [pc, #260]	; (8000698 <fsm_automatic_run+0x2e8>)
 8000594:	f001 fa61 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	483f      	ldr	r0, [pc, #252]	; (800069c <fsm_automatic_run+0x2ec>)
 800059e:	f001 fa5c 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	483e      	ldr	r0, [pc, #248]	; (80006a0 <fsm_automatic_run+0x2f0>)
 80005a8:	f001 fa57 	bl	8001a5a <HAL_GPIO_WritePin>


		if (timer2_flag == 1){
 80005ac:	4b47      	ldr	r3, [pc, #284]	; (80006cc <fsm_automatic_run+0x31c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d132      	bne.n	800061a <fsm_automatic_run+0x26a>
			lcd_clear_display ();
 80005b4:	f000 fbfe 	bl	8000db4 <lcd_clear_display>

			lcd_goto_XY(0, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fc04 	bl	8000dc8 <lcd_goto_XY>
			lcd_send_string("Red: ");
 80005c0:	4843      	ldr	r0, [pc, #268]	; (80006d0 <fsm_automatic_run+0x320>)
 80005c2:	f000 fbcb 	bl	8000d5c <lcd_send_string>
			lcd_send_num(tmpTimeRed1/100);
 80005c6:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <fsm_automatic_run+0x30c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a42      	ldr	r2, [pc, #264]	; (80006d4 <fsm_automatic_run+0x324>)
 80005cc:	fb82 1203 	smull	r1, r2, r2, r3
 80005d0:	1152      	asrs	r2, r2, #5
 80005d2:	17db      	asrs	r3, r3, #31
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fbd6 	bl	8000d88 <lcd_send_num>
			lcd_goto_XY(1, 0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fbf2 	bl	8000dc8 <lcd_goto_XY>
			lcd_send_string("Yellow: ");
 80005e4:	483e      	ldr	r0, [pc, #248]	; (80006e0 <fsm_automatic_run+0x330>)
 80005e6:	f000 fbb9 	bl	8000d5c <lcd_send_string>
			lcd_send_num(tmpTimeYellow1/100);
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <fsm_automatic_run+0x310>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a39      	ldr	r2, [pc, #228]	; (80006d4 <fsm_automatic_run+0x324>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1152      	asrs	r2, r2, #5
 80005f6:	17db      	asrs	r3, r3, #31
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fbc4 	bl	8000d88 <lcd_send_num>

			 tmpTimeRed1 = tmpTimeRed1 -100;
 8000600:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <fsm_automatic_run+0x30c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3b64      	subs	r3, #100	; 0x64
 8000606:	4a2d      	ldr	r2, [pc, #180]	; (80006bc <fsm_automatic_run+0x30c>)
 8000608:	6013      	str	r3, [r2, #0]
			 tmpTimeYellow1 = tmpTimeYellow1 - 100;
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <fsm_automatic_run+0x310>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b64      	subs	r3, #100	; 0x64
 8000610:	4a2b      	ldr	r2, [pc, #172]	; (80006c0 <fsm_automatic_run+0x310>)
 8000612:	6013      	str	r3, [r2, #0]
			 setTimer2(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fda3 	bl	8001160 <setTimer2>
		}

		if(timer1_flag == 1 ){
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <fsm_automatic_run+0x32c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d10f      	bne.n	8000642 <fsm_automatic_run+0x292>
			tmpTimeRed1 = redTime;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <fsm_automatic_run+0x2f8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a25      	ldr	r2, [pc, #148]	; (80006bc <fsm_automatic_run+0x30c>)
 8000628:	6013      	str	r3, [r2, #0]
			tmpTimeYellow1 = yellowTime;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <fsm_automatic_run+0x300>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <fsm_automatic_run+0x310>)
 8000630:	6013      	str	r3, [r2, #0]
			status = State3;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <fsm_automatic_run+0x2e4>)
 8000634:	2204      	movs	r2, #4
 8000636:	601a      	str	r2, [r3, #0]
			setTimer1(greenTime);
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <fsm_automatic_run+0x2f4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fd4d 	bl	80010dc <setTimer1>
		}
		if(isButton1Pressed() == 1){
 8000642:	f7ff fd83 	bl	800014c <isButton1Pressed>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	f040 815e 	bne.w	800090a <fsm_automatic_run+0x55a>
			mode = 2;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <fsm_automatic_run+0x318>)
 8000650:	2202      	movs	r2, #2
 8000652:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	480f      	ldr	r0, [pc, #60]	; (8000698 <fsm_automatic_run+0x2e8>)
 800065c:	f001 f9fd 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <fsm_automatic_run+0x2e8>)
 8000668:	f001 f9f7 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <fsm_automatic_run+0x2ec>)
 8000672:	f001 f9f2 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <fsm_automatic_run+0x2f0>)
 800067c:	f001 f9ed 	bl	8001a5a <HAL_GPIO_WritePin>

			lcd_clear_display();
 8000680:	f000 fb98 	bl	8000db4 <lcd_clear_display>

			status = MAN_RED;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <fsm_automatic_run+0x2e4>)
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]


			setTimer1(50);
 800068a:	2032      	movs	r0, #50	; 0x32
 800068c:	f000 fd26 	bl	80010dc <setTimer1>
		}



		break;
 8000690:	e13b      	b.n	800090a <fsm_automatic_run+0x55a>
 8000692:	bf00      	nop
 8000694:	200000e4 	.word	0x200000e4
 8000698:	40010800 	.word	0x40010800
 800069c:	40011000 	.word	0x40011000
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	20000044 	.word	0x20000044
 80006a8:	20000040 	.word	0x20000040
 80006ac:	20000104 	.word	0x20000104
 80006b0:	20000048 	.word	0x20000048
 80006b4:	20000108 	.word	0x20000108
 80006b8:	20000118 	.word	0x20000118
 80006bc:	20000110 	.word	0x20000110
 80006c0:	20000114 	.word	0x20000114
 80006c4:	2000010c 	.word	0x2000010c
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	200000f4 	.word	0x200000f4
 80006d0:	08003cbc 	.word	0x08003cbc
 80006d4:	51eb851f 	.word	0x51eb851f
 80006d8:	08003cc4 	.word	0x08003cc4
 80006dc:	200000ec 	.word	0x200000ec
 80006e0:	08003ccc 	.word	0x08003ccc

	case State3:
		//TODO
		//TODO
		HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	488b      	ldr	r0, [pc, #556]	; (8000918 <fsm_automatic_run+0x568>)
 80006ec:	f001 f9b5 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f6:	4888      	ldr	r0, [pc, #544]	; (8000918 <fsm_automatic_run+0x568>)
 80006f8:	f001 f9af 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	4886      	ldr	r0, [pc, #536]	; (800091c <fsm_automatic_run+0x56c>)
 8000702:	f001 f9aa 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	4885      	ldr	r0, [pc, #532]	; (8000920 <fsm_automatic_run+0x570>)
 800070c:	f001 f9a5 	bl	8001a5a <HAL_GPIO_WritePin>



		if (timer2_flag == 1){
 8000710:	4b84      	ldr	r3, [pc, #528]	; (8000924 <fsm_automatic_run+0x574>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d132      	bne.n	800077e <fsm_automatic_run+0x3ce>
		lcd_clear_display ();
 8000718:	f000 fb4c 	bl	8000db4 <lcd_clear_display>

		lcd_goto_XY(0, 0);
 800071c:	2100      	movs	r1, #0
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fb52 	bl	8000dc8 <lcd_goto_XY>
		lcd_send_string("Green: ");
 8000724:	4880      	ldr	r0, [pc, #512]	; (8000928 <fsm_automatic_run+0x578>)
 8000726:	f000 fb19 	bl	8000d5c <lcd_send_string>
		lcd_send_num(tmpTimeGreen1/100);
 800072a:	4b80      	ldr	r3, [pc, #512]	; (800092c <fsm_automatic_run+0x57c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a80      	ldr	r2, [pc, #512]	; (8000930 <fsm_automatic_run+0x580>)
 8000730:	fb82 1203 	smull	r1, r2, r2, r3
 8000734:	1152      	asrs	r2, r2, #5
 8000736:	17db      	asrs	r3, r3, #31
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fb24 	bl	8000d88 <lcd_send_num>
		lcd_goto_XY(1, 0);
 8000740:	2100      	movs	r1, #0
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fb40 	bl	8000dc8 <lcd_goto_XY>
		lcd_send_string("Red: ");
 8000748:	487a      	ldr	r0, [pc, #488]	; (8000934 <fsm_automatic_run+0x584>)
 800074a:	f000 fb07 	bl	8000d5c <lcd_send_string>
		lcd_send_num(tmpTimeRed1/100);
 800074e:	4b7a      	ldr	r3, [pc, #488]	; (8000938 <fsm_automatic_run+0x588>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a77      	ldr	r2, [pc, #476]	; (8000930 <fsm_automatic_run+0x580>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	1152      	asrs	r2, r2, #5
 800075a:	17db      	asrs	r3, r3, #31
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fb12 	bl	8000d88 <lcd_send_num>

		tmpTimeGreen1 = tmpTimeGreen1 -100;
 8000764:	4b71      	ldr	r3, [pc, #452]	; (800092c <fsm_automatic_run+0x57c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b64      	subs	r3, #100	; 0x64
 800076a:	4a70      	ldr	r2, [pc, #448]	; (800092c <fsm_automatic_run+0x57c>)
 800076c:	6013      	str	r3, [r2, #0]
		tmpTimeRed1 = tmpTimeRed1 - 100;
 800076e:	4b72      	ldr	r3, [pc, #456]	; (8000938 <fsm_automatic_run+0x588>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3b64      	subs	r3, #100	; 0x64
 8000774:	4a70      	ldr	r2, [pc, #448]	; (8000938 <fsm_automatic_run+0x588>)
 8000776:	6013      	str	r3, [r2, #0]
		 setTimer2(100);
 8000778:	2064      	movs	r0, #100	; 0x64
 800077a:	f000 fcf1 	bl	8001160 <setTimer2>


	}

		if(timer1_flag == 1 ){
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <fsm_automatic_run+0x58c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10b      	bne.n	800079e <fsm_automatic_run+0x3ee>
            tmpTimeGreen1 = greenTime;
 8000786:	4b6e      	ldr	r3, [pc, #440]	; (8000940 <fsm_automatic_run+0x590>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a68      	ldr	r2, [pc, #416]	; (800092c <fsm_automatic_run+0x57c>)
 800078c:	6013      	str	r3, [r2, #0]
			status = State4;
 800078e:	4b6d      	ldr	r3, [pc, #436]	; (8000944 <fsm_automatic_run+0x594>)
 8000790:	2205      	movs	r2, #5
 8000792:	601a      	str	r2, [r3, #0]
			setTimer1(yellowTime);
 8000794:	4b6c      	ldr	r3, [pc, #432]	; (8000948 <fsm_automatic_run+0x598>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fc9f 	bl	80010dc <setTimer1>
		}
		if(isButton1Pressed() == 1){
 800079e:	f7ff fcd5 	bl	800014c <isButton1Pressed>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	f040 80b2 	bne.w	800090e <fsm_automatic_run+0x55e>
			mode = 2;
 80007aa:	4b68      	ldr	r3, [pc, #416]	; (800094c <fsm_automatic_run+0x59c>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4858      	ldr	r0, [pc, #352]	; (8000918 <fsm_automatic_run+0x568>)
 80007b8:	f001 f94f 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c2:	4855      	ldr	r0, [pc, #340]	; (8000918 <fsm_automatic_run+0x568>)
 80007c4:	f001 f949 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	4853      	ldr	r0, [pc, #332]	; (800091c <fsm_automatic_run+0x56c>)
 80007ce:	f001 f944 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	4852      	ldr	r0, [pc, #328]	; (8000920 <fsm_automatic_run+0x570>)
 80007d8:	f001 f93f 	bl	8001a5a <HAL_GPIO_WritePin>

			lcd_clear_display();
 80007dc:	f000 faea 	bl	8000db4 <lcd_clear_display>

			status = MAN_RED;
 80007e0:	4b58      	ldr	r3, [pc, #352]	; (8000944 <fsm_automatic_run+0x594>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 80007e6:	2032      	movs	r0, #50	; 0x32
 80007e8:	f000 fc78 	bl	80010dc <setTimer1>
		}


		break;
 80007ec:	e08f      	b.n	800090e <fsm_automatic_run+0x55e>

	case State4:
		//TODO
		HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f4:	4848      	ldr	r0, [pc, #288]	; (8000918 <fsm_automatic_run+0x568>)
 80007f6:	f001 f930 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	4845      	ldr	r0, [pc, #276]	; (8000918 <fsm_automatic_run+0x568>)
 8000802:	f001 f92a 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 1);
 8000806:	2201      	movs	r2, #1
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4844      	ldr	r0, [pc, #272]	; (800091c <fsm_automatic_run+0x56c>)
 800080c:	f001 f925 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	4842      	ldr	r0, [pc, #264]	; (8000920 <fsm_automatic_run+0x570>)
 8000816:	f001 f920 	bl	8001a5a <HAL_GPIO_WritePin>



		if (timer2_flag == 1){
 800081a:	4b42      	ldr	r3, [pc, #264]	; (8000924 <fsm_automatic_run+0x574>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d132      	bne.n	8000888 <fsm_automatic_run+0x4d8>
		lcd_clear_display ();
 8000822:	f000 fac7 	bl	8000db4 <lcd_clear_display>

		lcd_goto_XY(0, 0);
 8000826:	2100      	movs	r1, #0
 8000828:	2000      	movs	r0, #0
 800082a:	f000 facd 	bl	8000dc8 <lcd_goto_XY>
		lcd_send_string("Yellow: ");
 800082e:	4848      	ldr	r0, [pc, #288]	; (8000950 <fsm_automatic_run+0x5a0>)
 8000830:	f000 fa94 	bl	8000d5c <lcd_send_string>
		lcd_send_num(tmpTimeYellow1/100);
 8000834:	4b47      	ldr	r3, [pc, #284]	; (8000954 <fsm_automatic_run+0x5a4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a3d      	ldr	r2, [pc, #244]	; (8000930 <fsm_automatic_run+0x580>)
 800083a:	fb82 1203 	smull	r1, r2, r2, r3
 800083e:	1152      	asrs	r2, r2, #5
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fa9f 	bl	8000d88 <lcd_send_num>
		lcd_goto_XY(1, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fabb 	bl	8000dc8 <lcd_goto_XY>
		lcd_send_string("Red: ");
 8000852:	4838      	ldr	r0, [pc, #224]	; (8000934 <fsm_automatic_run+0x584>)
 8000854:	f000 fa82 	bl	8000d5c <lcd_send_string>
		lcd_send_num(tmpTimeRed1/100);
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <fsm_automatic_run+0x588>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a34      	ldr	r2, [pc, #208]	; (8000930 <fsm_automatic_run+0x580>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	1152      	asrs	r2, r2, #5
 8000864:	17db      	asrs	r3, r3, #31
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fa8d 	bl	8000d88 <lcd_send_num>

		tmpTimeYellow1 = tmpTimeYellow1-100;
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <fsm_automatic_run+0x5a4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3b64      	subs	r3, #100	; 0x64
 8000874:	4a37      	ldr	r2, [pc, #220]	; (8000954 <fsm_automatic_run+0x5a4>)
 8000876:	6013      	str	r3, [r2, #0]
		tmpTimeRed1= tmpTimeRed1 -100;
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <fsm_automatic_run+0x588>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3b64      	subs	r3, #100	; 0x64
 800087e:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <fsm_automatic_run+0x588>)
 8000880:	6013      	str	r3, [r2, #0]
		 setTimer2(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 fc6c 	bl	8001160 <setTimer2>


	}


		if(timer1_flag == 1 ){
 8000888:	4b2c      	ldr	r3, [pc, #176]	; (800093c <fsm_automatic_run+0x58c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10f      	bne.n	80008b0 <fsm_automatic_run+0x500>
  tmpTimeRed1 = redTime;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <fsm_automatic_run+0x5a8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a28      	ldr	r2, [pc, #160]	; (8000938 <fsm_automatic_run+0x588>)
 8000896:	6013      	str	r3, [r2, #0]
  tmpTimeYellow1 = yellowTime;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <fsm_automatic_run+0x598>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <fsm_automatic_run+0x5a4>)
 800089e:	6013      	str	r3, [r2, #0]
			status = State1;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <fsm_automatic_run+0x594>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
			setTimer1(greenTime);
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <fsm_automatic_run+0x590>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fc16 	bl	80010dc <setTimer1>
		}
		if(isButton1Pressed() == 1){
 80008b0:	f7ff fc4c 	bl	800014c <isButton1Pressed>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d12b      	bne.n	8000912 <fsm_automatic_run+0x562>
			mode = 2;
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <fsm_automatic_run+0x59c>)
 80008bc:	2202      	movs	r2, #2
 80008be:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <fsm_automatic_run+0x568>)
 80008c8:	f001 f8c7 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <fsm_automatic_run+0x568>)
 80008d4:	f001 f8c1 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	480f      	ldr	r0, [pc, #60]	; (800091c <fsm_automatic_run+0x56c>)
 80008de:	f001 f8bc 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <fsm_automatic_run+0x570>)
 80008e8:	f001 f8b7 	bl	8001a5a <HAL_GPIO_WritePin>
			lcd_clear_display();
 80008ec:	f000 fa62 	bl	8000db4 <lcd_clear_display>
			status = MAN_RED;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <fsm_automatic_run+0x594>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f000 fbf0 	bl	80010dc <setTimer1>
		}

		break;
 80008fc:	e009      	b.n	8000912 <fsm_automatic_run+0x562>

	default:
		break;
 80008fe:	bf00      	nop
 8000900:	e008      	b.n	8000914 <fsm_automatic_run+0x564>
		break;
 8000902:	bf00      	nop
 8000904:	e006      	b.n	8000914 <fsm_automatic_run+0x564>
		break;
 8000906:	bf00      	nop
 8000908:	e004      	b.n	8000914 <fsm_automatic_run+0x564>
		break;
 800090a:	bf00      	nop
 800090c:	e002      	b.n	8000914 <fsm_automatic_run+0x564>
		break;
 800090e:	bf00      	nop
 8000910:	e000      	b.n	8000914 <fsm_automatic_run+0x564>
		break;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40010800 	.word	0x40010800
 800091c:	40011000 	.word	0x40011000
 8000920:	40010c00 	.word	0x40010c00
 8000924:	200000f4 	.word	0x200000f4
 8000928:	08003cc4 	.word	0x08003cc4
 800092c:	2000010c 	.word	0x2000010c
 8000930:	51eb851f 	.word	0x51eb851f
 8000934:	08003cbc 	.word	0x08003cbc
 8000938:	20000110 	.word	0x20000110
 800093c:	200000ec 	.word	0x200000ec
 8000940:	20000044 	.word	0x20000044
 8000944:	200000e4 	.word	0x200000e4
 8000948:	20000048 	.word	0x20000048
 800094c:	2000003c 	.word	0x2000003c
 8000950:	08003ccc 	.word	0x08003ccc
 8000954:	20000114 	.word	0x20000114
 8000958:	20000040 	.word	0x20000040

0800095c <fsm_manual_run>:
#include "i2c-lcd.h"
const int MAX_LED = 2;
int index_led = 0;
int index_led_t =0;
int mode = 2;
void fsm_manual_run(){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	switch(status){
 8000960:	4b9b      	ldr	r3, [pc, #620]	; (8000bd0 <fsm_manual_run+0x274>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b0e      	cmp	r3, #14
 8000966:	d070      	beq.n	8000a4a <fsm_manual_run+0xee>
 8000968:	2b0e      	cmp	r3, #14
 800096a:	f300 8127 	bgt.w	8000bbc <fsm_manual_run+0x260>
 800096e:	2b0c      	cmp	r3, #12
 8000970:	d003      	beq.n	800097a <fsm_manual_run+0x1e>
 8000972:	2b0d      	cmp	r3, #13
 8000974:	f000 80d2 	beq.w	8000b1c <fsm_manual_run+0x1c0>
    	   greenTime = tmpTimeGreen;
       }

		break;
	default:
		break;
 8000978:	e120      	b.n	8000bbc <fsm_manual_run+0x260>
		lcd_goto_XY(0, 0);
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f000 fa23 	bl	8000dc8 <lcd_goto_XY>
		lcd_send_string("RED");
 8000982:	4894      	ldr	r0, [pc, #592]	; (8000bd4 <fsm_manual_run+0x278>)
 8000984:	f000 f9ea 	bl	8000d5c <lcd_send_string>
		lcd_goto_XY(1, 0);
 8000988:	2100      	movs	r1, #0
 800098a:	2001      	movs	r0, #1
 800098c:	f000 fa1c 	bl	8000dc8 <lcd_goto_XY>
		lcd_send_num(tmpTimeRed/100);
 8000990:	4b91      	ldr	r3, [pc, #580]	; (8000bd8 <fsm_manual_run+0x27c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a91      	ldr	r2, [pc, #580]	; (8000bdc <fsm_manual_run+0x280>)
 8000996:	fb82 1203 	smull	r1, r2, r2, r3
 800099a:	1152      	asrs	r2, r2, #5
 800099c:	17db      	asrs	r3, r3, #31
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f9f1 	bl	8000d88 <lcd_send_num>
		if (timer1_flag == 1){
 80009a6:	4b8e      	ldr	r3, [pc, #568]	; (8000be0 <fsm_manual_run+0x284>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d114      	bne.n	80009d8 <fsm_manual_run+0x7c>
			HAL_GPIO_TogglePin(led1_bit1_GPIO_Port,led1_bit1_Pin);
 80009ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b2:	488c      	ldr	r0, [pc, #560]	; (8000be4 <fsm_manual_run+0x288>)
 80009b4:	f001 f869 	bl	8001a8a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led1_bit2_GPIO_Port,led1_bit2_Pin);
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4889      	ldr	r0, [pc, #548]	; (8000be4 <fsm_manual_run+0x288>)
 80009be:	f001 f864 	bl	8001a8a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_bit1_GPIO_Port,led2_bit1_Pin);
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	4888      	ldr	r0, [pc, #544]	; (8000be8 <fsm_manual_run+0x28c>)
 80009c6:	f001 f860 	bl	8001a8a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_bit2_GPIO_Port,led2_bit2_Pin);
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	4887      	ldr	r0, [pc, #540]	; (8000bec <fsm_manual_run+0x290>)
 80009ce:	f001 f85c 	bl	8001a8a <HAL_GPIO_TogglePin>
			setTimer1(50);
 80009d2:	2032      	movs	r0, #50	; 0x32
 80009d4:	f000 fb82 	bl	80010dc <setTimer1>
		if(isButton1Pressed() == 1){
 80009d8:	f7ff fbb8 	bl	800014c <isButton1Pressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d120      	bne.n	8000a24 <fsm_manual_run+0xc8>
			mode = 3;
 80009e2:	4b83      	ldr	r3, [pc, #524]	; (8000bf0 <fsm_manual_run+0x294>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ee:	487d      	ldr	r0, [pc, #500]	; (8000be4 <fsm_manual_run+0x288>)
 80009f0:	f001 f833 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fa:	487a      	ldr	r0, [pc, #488]	; (8000be4 <fsm_manual_run+0x288>)
 80009fc:	f001 f82d 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	4878      	ldr	r0, [pc, #480]	; (8000be8 <fsm_manual_run+0x28c>)
 8000a06:	f001 f828 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4877      	ldr	r0, [pc, #476]	; (8000bec <fsm_manual_run+0x290>)
 8000a10:	f001 f823 	bl	8001a5a <HAL_GPIO_WritePin>
			lcd_clear_display();
 8000a14:	f000 f9ce 	bl	8000db4 <lcd_clear_display>
			status = MAN_YELLOW;
 8000a18:	4b6d      	ldr	r3, [pc, #436]	; (8000bd0 <fsm_manual_run+0x274>)
 8000a1a:	220e      	movs	r2, #14
 8000a1c:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000a1e:	2032      	movs	r0, #50	; 0x32
 8000a20:	f000 fb5c 	bl	80010dc <setTimer1>
		tmpTimeRed = fsm_setting_run(tmpTimeRed);
 8000a24:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <fsm_manual_run+0x27c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8f1 	bl	8000c10 <fsm_setting_run>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4a69      	ldr	r2, [pc, #420]	; (8000bd8 <fsm_manual_run+0x27c>)
 8000a32:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 8000a34:	f7ff fbae 	bl	8000194 <isButton3Pressed>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	f040 80c0 	bne.w	8000bc0 <fsm_manual_run+0x264>
			redTime = tmpTimeRed;
 8000a40:	4b65      	ldr	r3, [pc, #404]	; (8000bd8 <fsm_manual_run+0x27c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a6b      	ldr	r2, [pc, #428]	; (8000bf4 <fsm_manual_run+0x298>)
 8000a46:	6013      	str	r3, [r2, #0]
		break;
 8000a48:	e0ba      	b.n	8000bc0 <fsm_manual_run+0x264>
		HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	4864      	ldr	r0, [pc, #400]	; (8000be4 <fsm_manual_run+0x288>)
 8000a52:	f001 f802 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4863      	ldr	r0, [pc, #396]	; (8000be8 <fsm_manual_run+0x28c>)
 8000a5c:	f000 fffd 	bl	8001a5a <HAL_GPIO_WritePin>
		lcd_goto_XY(0, 0);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f9b0 	bl	8000dc8 <lcd_goto_XY>
				lcd_send_string("YELLOW");
 8000a68:	4863      	ldr	r0, [pc, #396]	; (8000bf8 <fsm_manual_run+0x29c>)
 8000a6a:	f000 f977 	bl	8000d5c <lcd_send_string>
				lcd_goto_XY(1, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 f9a9 	bl	8000dc8 <lcd_goto_XY>
				lcd_send_num(tmpTimeYellow/100);
 8000a76:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <fsm_manual_run+0x2a0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a58      	ldr	r2, [pc, #352]	; (8000bdc <fsm_manual_run+0x280>)
 8000a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a80:	1152      	asrs	r2, r2, #5
 8000a82:	17db      	asrs	r3, r3, #31
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f97e 	bl	8000d88 <lcd_send_num>
		if (timer1_flag == 1){
 8000a8c:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <fsm_manual_run+0x284>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10b      	bne.n	8000aac <fsm_manual_run+0x150>
			HAL_GPIO_TogglePin(led1_bit2_GPIO_Port,led1_bit2_Pin);
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	4852      	ldr	r0, [pc, #328]	; (8000be4 <fsm_manual_run+0x288>)
 8000a9a:	f000 fff6 	bl	8001a8a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_bit2_GPIO_Port,led2_bit2_Pin);
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	4852      	ldr	r0, [pc, #328]	; (8000bec <fsm_manual_run+0x290>)
 8000aa2:	f000 fff2 	bl	8001a8a <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000aa6:	2032      	movs	r0, #50	; 0x32
 8000aa8:	f000 fb18 	bl	80010dc <setTimer1>
		if(isButton1Pressed() == 1){
 8000aac:	f7ff fb4e 	bl	800014c <isButton1Pressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d120      	bne.n	8000af8 <fsm_manual_run+0x19c>
			mode = 4;
 8000ab6:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <fsm_manual_run+0x294>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(led1_bit1_GPIO_Port, led1_bit1_Pin, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4848      	ldr	r0, [pc, #288]	; (8000be4 <fsm_manual_run+0x288>)
 8000ac4:	f000 ffc9 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ace:	4845      	ldr	r0, [pc, #276]	; (8000be4 <fsm_manual_run+0x288>)
 8000ad0:	f000 ffc3 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	4843      	ldr	r0, [pc, #268]	; (8000be8 <fsm_manual_run+0x28c>)
 8000ada:	f000 ffbe 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4842      	ldr	r0, [pc, #264]	; (8000bec <fsm_manual_run+0x290>)
 8000ae4:	f000 ffb9 	bl	8001a5a <HAL_GPIO_WritePin>
			lcd_clear_display();
 8000ae8:	f000 f964 	bl	8000db4 <lcd_clear_display>
			status = MAN_GREEN;
 8000aec:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <fsm_manual_run+0x274>)
 8000aee:	220d      	movs	r2, #13
 8000af0:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000af2:	2032      	movs	r0, #50	; 0x32
 8000af4:	f000 faf2 	bl	80010dc <setTimer1>
		tmpTimeYellow = fsm_setting_run(tmpTimeYellow);
 8000af8:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <fsm_manual_run+0x2a0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f887 	bl	8000c10 <fsm_setting_run>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <fsm_manual_run+0x2a0>)
 8000b06:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 8000b08:	f7ff fb44 	bl	8000194 <isButton3Pressed>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d158      	bne.n	8000bc4 <fsm_manual_run+0x268>
			yellowTime = tmpTimeYellow;
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <fsm_manual_run+0x2a0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3a      	ldr	r2, [pc, #232]	; (8000c00 <fsm_manual_run+0x2a4>)
 8000b18:	6013      	str	r3, [r2, #0]
		break;
 8000b1a:	e053      	b.n	8000bc4 <fsm_manual_run+0x268>
		HAL_GPIO_WritePin(led1_bit2_GPIO_Port, led1_bit2_Pin, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b22:	4830      	ldr	r0, [pc, #192]	; (8000be4 <fsm_manual_run+0x288>)
 8000b24:	f000 ff99 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	482f      	ldr	r0, [pc, #188]	; (8000bec <fsm_manual_run+0x290>)
 8000b2e:	f000 ff94 	bl	8001a5a <HAL_GPIO_WritePin>
		lcd_goto_XY(0, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f947 	bl	8000dc8 <lcd_goto_XY>
						lcd_send_string("GREEN");
 8000b3a:	4832      	ldr	r0, [pc, #200]	; (8000c04 <fsm_manual_run+0x2a8>)
 8000b3c:	f000 f90e 	bl	8000d5c <lcd_send_string>
						lcd_goto_XY(1, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 f940 	bl	8000dc8 <lcd_goto_XY>
						lcd_send_num(tmpTimeGreen/100);
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <fsm_manual_run+0x2ac>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <fsm_manual_run+0x280>)
 8000b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b52:	1152      	asrs	r2, r2, #5
 8000b54:	17db      	asrs	r3, r3, #31
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f915 	bl	8000d88 <lcd_send_num>
		if (timer1_flag == 1){
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <fsm_manual_run+0x284>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10b      	bne.n	8000b7e <fsm_manual_run+0x222>
			HAL_GPIO_TogglePin(led1_bit1_GPIO_Port,led1_bit1_Pin);
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <fsm_manual_run+0x288>)
 8000b6c:	f000 ff8d 	bl	8001a8a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(led2_bit1_GPIO_Port,led2_bit1_Pin);
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	481d      	ldr	r0, [pc, #116]	; (8000be8 <fsm_manual_run+0x28c>)
 8000b74:	f000 ff89 	bl	8001a8a <HAL_GPIO_TogglePin>
			setTimer1(50);
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f000 faaf 	bl	80010dc <setTimer1>
		if(isButton1Pressed() == 1){
 8000b7e:	f7ff fae5 	bl	800014c <isButton1Pressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d107      	bne.n	8000b98 <fsm_manual_run+0x23c>
			lcd_clear_display();
 8000b88:	f000 f914 	bl	8000db4 <lcd_clear_display>
			status = INIT;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <fsm_manual_run+0x274>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
			setTimer1(50);
 8000b92:	2032      	movs	r0, #50	; 0x32
 8000b94:	f000 faa2 	bl	80010dc <setTimer1>
		tmpTimeGreen = fsm_setting_run(tmpTimeGreen);
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <fsm_manual_run+0x2ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f837 	bl	8000c10 <fsm_setting_run>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <fsm_manual_run+0x2ac>)
 8000ba6:	6013      	str	r3, [r2, #0]
       if(isButton3Pressed() == 1){
 8000ba8:	f7ff faf4 	bl	8000194 <isButton3Pressed>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10a      	bne.n	8000bc8 <fsm_manual_run+0x26c>
    	   greenTime = tmpTimeGreen;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <fsm_manual_run+0x2ac>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <fsm_manual_run+0x2b0>)
 8000bb8:	6013      	str	r3, [r2, #0]
		break;
 8000bba:	e005      	b.n	8000bc8 <fsm_manual_run+0x26c>
		break;
 8000bbc:	bf00      	nop
 8000bbe:	e004      	b.n	8000bca <fsm_manual_run+0x26e>
		break;
 8000bc0:	bf00      	nop
 8000bc2:	e002      	b.n	8000bca <fsm_manual_run+0x26e>
		break;
 8000bc4:	bf00      	nop
 8000bc6:	e000      	b.n	8000bca <fsm_manual_run+0x26e>
		break;
 8000bc8:	bf00      	nop
	}
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000e4 	.word	0x200000e4
 8000bd4:	08003cd8 	.word	0x08003cd8
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	51eb851f 	.word	0x51eb851f
 8000be0:	200000ec 	.word	0x200000ec
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	2000003c 	.word	0x2000003c
 8000bf4:	20000040 	.word	0x20000040
 8000bf8:	08003cdc 	.word	0x08003cdc
 8000bfc:	20000108 	.word	0x20000108
 8000c00:	20000048 	.word	0x20000048
 8000c04:	08003ce4 	.word	0x08003ce4
 8000c08:	20000118 	.word	0x20000118
 8000c0c:	20000044 	.word	0x20000044

08000c10 <fsm_setting_run>:

#include "fsm_setting.h"

int tmp3 = 0;

int fsm_setting_run(int curT){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    if (isButton2Pressed() == 1) {
 8000c18:	f7ff faaa 	bl	8000170 <isButton2Pressed>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d109      	bne.n	8000c36 <fsm_setting_run+0x26>
        curT = curT + 100;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3364      	adds	r3, #100	; 0x64
 8000c26:	607b      	str	r3, [r7, #4]
        if (curT > 9900) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	dd01      	ble.n	8000c36 <fsm_setting_run+0x26>
            curT = 100;
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	607b      	str	r3, [r7, #4]
        }

    }

    return curT;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f023 030f 	bic.w	r3, r3, #15
 8000c50:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	f043 030c 	orr.w	r3, r3, #12
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	f043 030c 	orr.w	r3, r3, #12
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c80:	f107 0208 	add.w	r2, r7, #8
 8000c84:	2364      	movs	r3, #100	; 0x64
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2304      	movs	r3, #4
 8000c8a:	2142      	movs	r1, #66	; 0x42
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <lcd_send_cmd+0x5c>)
 8000c8e:	f001 f859 	bl	8001d44 <HAL_I2C_Master_Transmit>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000011c 	.word	0x2000011c

08000ca0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f023 030f 	bic.w	r3, r3, #15
 8000cb0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	f043 030d 	orr.w	r3, r3, #13
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	f043 0309 	orr.w	r3, r3, #9
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	f043 030d 	orr.w	r3, r3, #13
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	f043 0309 	orr.w	r3, r3, #9
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ce0:	f107 0208 	add.w	r2, r7, #8
 8000ce4:	2364      	movs	r3, #100	; 0x64
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2304      	movs	r3, #4
 8000cea:	2142      	movs	r1, #66	; 0x42
 8000cec:	4803      	ldr	r0, [pc, #12]	; (8000cfc <lcd_send_data+0x5c>)
 8000cee:	f001 f829 	bl	8001d44 <HAL_I2C_Master_Transmit>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000011c 	.word	0x2000011c

08000d00 <lcd_init>:

void lcd_init (void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000d04:	2033      	movs	r0, #51	; 0x33
 8000d06:	f7ff ff9b 	bl	8000c40 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000d0a:	2032      	movs	r0, #50	; 0x32
 8000d0c:	f7ff ff98 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(50);
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f000 fbd5 	bl	80014c0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000d16:	2028      	movs	r0, #40	; 0x28
 8000d18:	f7ff ff92 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f000 fbcf 	bl	80014c0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff ff8c 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(50);
 8000d28:	2032      	movs	r0, #50	; 0x32
 8000d2a:	f000 fbc9 	bl	80014c0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d2e:	2006      	movs	r0, #6
 8000d30:	f7ff ff86 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(50);
 8000d34:	2032      	movs	r0, #50	; 0x32
 8000d36:	f000 fbc3 	bl	80014c0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000d3a:	200c      	movs	r0, #12
 8000d3c:	f7ff ff80 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(50);
 8000d40:	2032      	movs	r0, #50	; 0x32
 8000d42:	f000 fbbd 	bl	80014c0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff ff7a 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(50);
 8000d4c:	2032      	movs	r0, #50	; 0x32
 8000d4e:	f000 fbb7 	bl	80014c0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	f7ff ff74 	bl	8000c40 <lcd_send_cmd>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d64:	e006      	b.n	8000d74 <lcd_send_string+0x18>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff96 	bl	8000ca0 <lcd_send_data>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f4      	bne.n	8000d66 <lcd_send_string+0xa>
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <lcd_send_num>:


void lcd_send_num(int num)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    char str[12]; // Bộ nhớ đủ lớn để chứa số nguyên 32-bit + dấu âm và ký tự kết thúc chuỗi
    sprintf(str, "%d", num); // Chuyển đổi số nguyên thành chuỗi
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4906      	ldr	r1, [pc, #24]	; (8000db0 <lcd_send_num+0x28>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fb49 	bl	8003430 <siprintf>
    lcd_send_string(str);    // Hiển thị chuỗi ra LCD
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffda 	bl	8000d5c <lcd_send_string>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	08003cec 	.word	0x08003cec

08000db4 <lcd_clear_display>:
void lcd_clear_display (void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ff41 	bl	8000c40 <lcd_send_cmd>
	HAL_Delay(20);
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f000 fb7e 	bl	80014c0 <HAL_Delay>
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	337f      	adds	r3, #127	; 0x7f
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e008      	b.n	8000dfc <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3340      	adds	r3, #64	; 0x40
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff1e 	bl	8000c40 <lcd_send_cmd>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 faf4 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f818 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 f8cc 	bl	8000fb4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e1c:	f000 f87e 	bl	8000f1c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e20:	f000 f84e 	bl	8000ec0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e24:	4806      	ldr	r0, [pc, #24]	; (8000e40 <main+0x34>)
 8000e26:	f001 ff2f 	bl	8002c88 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000e2a:	f7ff ff69 	bl	8000d00 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <main+0x38>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000e34:	f7ff fabc 	bl	80003b0 <fsm_automatic_run>
	  fsm_manual_run();
 8000e38:	f7ff fd90 	bl	800095c <fsm_manual_run>
	  fsm_automatic_run();
 8000e3c:	e7fa      	b.n	8000e34 <main+0x28>
 8000e3e:	bf00      	nop
 8000e40:	20000170 	.word	0x20000170
 8000e44:	200000e4 	.word	0x200000e4

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b090      	sub	sp, #64	; 0x40
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2228      	movs	r2, #40	; 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f002 fae2 	bl	8003420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e72:	2310      	movs	r3, #16
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fab8 	bl	80023f4 <HAL_RCC_OscConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e8a:	f000 f921 	bl	80010d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8e:	230f      	movs	r3, #15
 8000e90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fd24 	bl	80028f4 <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 f90d 	bl	80010d0 <Error_Handler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3740      	adds	r7, #64	; 0x40
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <MX_I2C1_Init+0x54>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_I2C1_Init+0x58>)
 8000ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_I2C1_Init+0x50>)
 8000efe:	f000 fddd 	bl	8001abc <HAL_I2C_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f08:	f000 f8e2 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	40005400 	.word	0x40005400
 8000f18:	000186a0 	.word	0x000186a0

08000f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f42:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f50:	2209      	movs	r2, #9
 8000f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f62:	f001 fe41 	bl	8002be8 <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f6c:	f000 f8b0 	bl	80010d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f7e:	f001 ffc5 	bl	8002f0c <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f88:	f000 f8a2 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f9a:	f002 f9a7 	bl	80032ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f000 f894 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000170 	.word	0x20000170

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a36      	ldr	r2, [pc, #216]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_GPIO_Init+0xf4>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_bit1_GPIO_Port, led2_bit1_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	4825      	ldr	r0, [pc, #148]	; (80010ac <MX_GPIO_Init+0xf8>)
 8001016:	f000 fd20 	bl	8001a5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_bit1_Pin|led1_bit2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001020:	4823      	ldr	r0, [pc, #140]	; (80010b0 <MX_GPIO_Init+0xfc>)
 8001022:	f000 fd1a 	bl	8001a5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_bit2_GPIO_Port, led2_bit2_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4822      	ldr	r0, [pc, #136]	; (80010b4 <MX_GPIO_Init+0x100>)
 800102c:	f000 fd15 	bl	8001a5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led2_bit1_Pin */
  GPIO_InitStruct.Pin = led2_bit1_Pin;
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led2_bit1_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4819      	ldr	r0, [pc, #100]	; (80010ac <MX_GPIO_Init+0xf8>)
 8001048:	f000 fb6c 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_bit1_Pin led1_bit2_Pin */
  GPIO_InitStruct.Pin = led1_bit1_Pin|led1_bit2_Pin;
 800104c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <MX_GPIO_Init+0xfc>)
 8001066:	f000 fb5d 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button3_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button3_Pin|Button2_Pin;
 800106a:	2338      	movs	r3, #56	; 0x38
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_GPIO_Init+0x100>)
 800107e:	f000 fb51 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_bit2_Pin */
  GPIO_InitStruct.Pin = led2_bit2_Pin;
 8001082:	2340      	movs	r3, #64	; 0x40
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led2_bit2_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_GPIO_Init+0x100>)
 800109a:	f000 fb43 	bl	8001724 <HAL_GPIO_Init>

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	timerRun();
 80010c0:	f000 f820 	bl	8001104 <timerRun>
	getKeyInput();
 80010c4:	f7ff f89c 	bl	8000200 <getKeyInput>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <Error_Handler+0x8>
	...

080010dc <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
void setTimer1(int duration){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <setTimer1+0x20>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <setTimer1+0x24>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200000e8 	.word	0x200000e8
 8001100:	200000ec 	.word	0x200000ec

08001104 <timerRun>:
void timerRun(){
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <timerRun+0x4c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dd0b      	ble.n	8001128 <timerRun+0x24>
		timer1_counter --;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <timerRun+0x4c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <timerRun+0x4c>)
 8001118:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <timerRun+0x4c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	dc02      	bgt.n	8001128 <timerRun+0x24>
			timer1_flag = 1;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <timerRun+0x50>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <timerRun+0x54>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd0b      	ble.n	8001148 <timerRun+0x44>
			timer2_counter --;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <timerRun+0x54>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <timerRun+0x54>)
 8001138:	6013      	str	r3, [r2, #0]
			if(timer2_counter <=0){
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <timerRun+0x54>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc02      	bgt.n	8001148 <timerRun+0x44>
				timer2_flag = 1;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <timerRun+0x58>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	200000e8 	.word	0x200000e8
 8001154:	200000ec 	.word	0x200000ec
 8001158:	200000f0 	.word	0x200000f0
 800115c:	200000f4 	.word	0x200000f4

08001160 <setTimer2>:



void setTimer2(int duration){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <setTimer2+0x20>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <setTimer2+0x24>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200000f0 	.word	0x200000f0
 8001184:	200000f4 	.word	0x200000f4

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_MspInit+0x5c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_MspInit+0x5c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x60>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_MspInit+0x60>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000

080011ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_I2C_MspInit+0x90>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d132      	bne.n	8001272 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_I2C_MspInit+0x94>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_I2C_MspInit+0x94>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_I2C_MspInit+0x94>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001224:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122a:	2312      	movs	r3, #18
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <HAL_I2C_MspInit+0x98>)
 800123a:	f000 fa73 	bl	8001724 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_I2C_MspInit+0x9c>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_I2C_MspInit+0x9c>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_I2C_MspInit+0x94>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_I2C_MspInit+0x94>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_I2C_MspInit+0x94>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40005400 	.word	0x40005400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40010000 	.word	0x40010000

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129c:	d113      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0x44>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_TIM_Base_MspInit+0x44>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_TIM_Base_MspInit+0x44>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f000 f9fb 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c0:	201c      	movs	r0, #28
 80012c2:	f000 fa14 	bl	80016ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131a:	f000 f8b5 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM2_IRQHandler+0x10>)
 800132a:	f001 fcff 	bl	8002d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000170 	.word	0x20000170

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f002 f830 	bl	80033cc <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20005000 	.word	0x20005000
 8001398:	00000400 	.word	0x00000400
 800139c:	200000f8 	.word	0x200000f8
 80013a0:	200001d0 	.word	0x200001d0

080013a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b0:	f7ff fff8 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480b      	ldr	r0, [pc, #44]	; (80013e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013cc:	4c09      	ldr	r4, [pc, #36]	; (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013da:	f001 fffd 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7ff fd15 	bl	8000e0c <main>
  bx lr
 80013e2:	4770      	bx	lr
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80013ec:	08003d58 	.word	0x08003d58
  ldr r2, =_sbss
 80013f0:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80013f4:	200001cc 	.word	0x200001cc

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_Init+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_Init+0x28>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f947 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	200f      	movs	r0, #15
 8001414:	f000 f808 	bl	8001428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff feb6 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x54>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x58>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f95f 	bl	800170a <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f000 f927 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_InitTick+0x5c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000004c 	.word	0x2000004c
 8001480:	20000054 	.word	0x20000054
 8001484:	20000050 	.word	0x20000050

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x1c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_IncTick+0x20>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000054 	.word	0x20000054
 80014a8:	200001b8 	.word	0x200001b8

080014ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	; (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	200001b8 	.word	0x200001b8

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fff0 	bl	80014ac <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffe0 	bl	80014ac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000054 	.word	0x20000054

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <__NVIC_EnableIRQ+0x34>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff90 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff2d 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff42 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff90 	bl	80015f8 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5f 	bl	80015a4 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff35 	bl	800156c <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e169      	b.n	8001a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001738:	2201      	movs	r2, #1
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8158 	bne.w	8001a06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a9a      	ldr	r2, [pc, #616]	; (80019c4 <HAL_GPIO_Init+0x2a0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d05e      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001760:	4a98      	ldr	r2, [pc, #608]	; (80019c4 <HAL_GPIO_Init+0x2a0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d875      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 8001766:	4a98      	ldr	r2, [pc, #608]	; (80019c8 <HAL_GPIO_Init+0x2a4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d058      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 800176c:	4a96      	ldr	r2, [pc, #600]	; (80019c8 <HAL_GPIO_Init+0x2a4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d86f      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 8001772:	4a96      	ldr	r2, [pc, #600]	; (80019cc <HAL_GPIO_Init+0x2a8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d052      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001778:	4a94      	ldr	r2, [pc, #592]	; (80019cc <HAL_GPIO_Init+0x2a8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d869      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 800177e:	4a94      	ldr	r2, [pc, #592]	; (80019d0 <HAL_GPIO_Init+0x2ac>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d04c      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001784:	4a92      	ldr	r2, [pc, #584]	; (80019d0 <HAL_GPIO_Init+0x2ac>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d863      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 800178a:	4a92      	ldr	r2, [pc, #584]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d046      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001790:	4a90      	ldr	r2, [pc, #576]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d85d      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d82a      	bhi.n	80017f0 <HAL_GPIO_Init+0xcc>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d859      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_GPIO_Init+0x80>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	080017f9 	.word	0x080017f9
 80017ac:	0800180b 	.word	0x0800180b
 80017b0:	0800184d 	.word	0x0800184d
 80017b4:	08001853 	.word	0x08001853
 80017b8:	08001853 	.word	0x08001853
 80017bc:	08001853 	.word	0x08001853
 80017c0:	08001853 	.word	0x08001853
 80017c4:	08001853 	.word	0x08001853
 80017c8:	08001853 	.word	0x08001853
 80017cc:	08001853 	.word	0x08001853
 80017d0:	08001853 	.word	0x08001853
 80017d4:	08001853 	.word	0x08001853
 80017d8:	08001853 	.word	0x08001853
 80017dc:	08001853 	.word	0x08001853
 80017e0:	08001853 	.word	0x08001853
 80017e4:	08001853 	.word	0x08001853
 80017e8:	08001801 	.word	0x08001801
 80017ec:	08001815 	.word	0x08001815
 80017f0:	4a79      	ldr	r2, [pc, #484]	; (80019d8 <HAL_GPIO_Init+0x2b4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f6:	e02c      	b.n	8001852 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e029      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	3304      	adds	r3, #4
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e024      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	3308      	adds	r3, #8
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e01f      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	330c      	adds	r3, #12
 800181a:	623b      	str	r3, [r7, #32]
          break;
 800181c:	e01a      	b.n	8001854 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001826:	2304      	movs	r3, #4
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e013      	b.n	8001854 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001834:	2308      	movs	r3, #8
 8001836:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	611a      	str	r2, [r3, #16]
          break;
 800183e:	e009      	b.n	8001854 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	615a      	str	r2, [r3, #20]
          break;
 800184a:	e003      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e000      	b.n	8001854 <HAL_GPIO_Init+0x130>
          break;
 8001852:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2bff      	cmp	r3, #255	; 0xff
 8001858:	d801      	bhi.n	800185e <HAL_GPIO_Init+0x13a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	e001      	b.n	8001862 <HAL_GPIO_Init+0x13e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3304      	adds	r3, #4
 8001862:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d802      	bhi.n	8001870 <HAL_GPIO_Init+0x14c>
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x152>
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	3b08      	subs	r3, #8
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	210f      	movs	r1, #15
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	6a39      	ldr	r1, [r7, #32]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80b1 	beq.w	8001a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x2b8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x2b8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_GPIO_Init+0x2b8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018bc:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <HAL_GPIO_Init+0x2bc>)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a40      	ldr	r2, [pc, #256]	; (80019e4 <HAL_GPIO_Init+0x2c0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d013      	beq.n	8001910 <HAL_GPIO_Init+0x1ec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <HAL_GPIO_Init+0x2c4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x1e8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_GPIO_Init+0x1e4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <HAL_GPIO_Init+0x2cc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_GPIO_Init+0x1e0>
 8001900:	2303      	movs	r3, #3
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 8001904:	2304      	movs	r3, #4
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 8001910:	2300      	movs	r3, #0
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001922:	492f      	ldr	r1, [pc, #188]	; (80019e0 <HAL_GPIO_Init+0x2bc>)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	492c      	ldr	r1, [pc, #176]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4928      	ldr	r1, [pc, #160]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001954:	4013      	ands	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	4922      	ldr	r1, [pc, #136]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	491e      	ldr	r1, [pc, #120]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800197c:	4013      	ands	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4918      	ldr	r1, [pc, #96]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4914      	ldr	r1, [pc, #80]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d021      	beq.n	80019f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	490e      	ldr	r1, [pc, #56]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e021      	b.n	8001a06 <HAL_GPIO_Init+0x2e2>
 80019c2:	bf00      	nop
 80019c4:	10320000 	.word	0x10320000
 80019c8:	10310000 	.word	0x10310000
 80019cc:	10220000 	.word	0x10220000
 80019d0:	10210000 	.word	0x10210000
 80019d4:	10120000 	.word	0x10120000
 80019d8:	10110000 	.word	0x10110000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	40010800 	.word	0x40010800
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	40011000 	.word	0x40011000
 80019f0:	40011400 	.word	0x40011400
 80019f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4909      	ldr	r1, [pc, #36]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f47f ae8e 	bne.w	8001738 <HAL_GPIO_Init+0x14>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	372c      	adds	r7, #44	; 0x2c
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	807b      	strh	r3, [r7, #2]
 8001a66:	4613      	mov	r3, r2
 8001a68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6a:	787b      	ldrb	r3, [r7, #1]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a76:	e003      	b.n	8001a80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e12b      	b.n	8001d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fb82 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b20:	f001 f830 	bl	8002b84 <HAL_RCC_GetPCLK1Freq>
 8001b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a81      	ldr	r2, [pc, #516]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d807      	bhi.n	8001b40 <HAL_I2C_Init+0x84>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a80      	ldr	r2, [pc, #512]	; (8001d34 <HAL_I2C_Init+0x278>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	bf94      	ite	ls
 8001b38:	2301      	movls	r3, #1
 8001b3a:	2300      	movhi	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e006      	b.n	8001b4e <HAL_I2C_Init+0x92>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a7d      	ldr	r2, [pc, #500]	; (8001d38 <HAL_I2C_Init+0x27c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bf94      	ite	ls
 8001b48:	2301      	movls	r3, #1
 8001b4a:	2300      	movhi	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0e7      	b.n	8001d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a78      	ldr	r2, [pc, #480]	; (8001d3c <HAL_I2C_Init+0x280>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d802      	bhi.n	8001b90 <HAL_I2C_Init+0xd4>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	e009      	b.n	8001ba4 <HAL_I2C_Init+0xe8>
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <HAL_I2C_Init+0x284>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	495c      	ldr	r1, [pc, #368]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d819      	bhi.n	8001bf8 <HAL_I2C_Init+0x13c>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e59      	subs	r1, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bd8:	400b      	ands	r3, r1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_I2C_Init+0x138>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e59      	subs	r1, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf2:	e051      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e04f      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <HAL_I2C_Init+0x168>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e012      	b.n	8001c4a <HAL_I2C_Init+0x18e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Init+0x196>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e022      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10e      	bne.n	8001c78 <HAL_I2C_Init+0x1bc>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e58      	subs	r0, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c76:	e00f      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	0099      	lsls	r1, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	6809      	ldr	r1, [r1, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6911      	ldr	r1, [r2, #16]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68d2      	ldr	r2, [r2, #12]
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	001e847f 	.word	0x001e847f
 8001d38:	003d08ff 	.word	0x003d08ff
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	817b      	strh	r3, [r7, #10]
 8001d54:	4613      	mov	r3, r2
 8001d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fba8 	bl	80014ac <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	f040 80e0 	bne.w	8001f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2319      	movs	r3, #25
 8001d72:	2201      	movs	r2, #1
 8001d74:	4970      	ldr	r1, [pc, #448]	; (8001f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f964 	bl	8002044 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0d3      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x50>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e0cc      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d007      	beq.n	8001dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	; 0x21
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	893a      	ldrh	r2, [r7, #8]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dfc:	8979      	ldrh	r1, [r7, #10]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f89c 	bl	8001f40 <I2C_MasterRequestWrite>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e08d      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e28:	e066      	b.n	8001ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	6a39      	ldr	r1, [r7, #32]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa22 	bl	8002278 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d107      	bne.n	8001e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06b      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d11b      	bne.n	8001ecc <HAL_I2C_Master_Transmit+0x188>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d017      	beq.n	8001ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	6a39      	ldr	r1, [r7, #32]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fa19 	bl	8002308 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00d      	beq.n	8001ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d107      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e01a      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d194      	bne.n	8001e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	00100002 	.word	0x00100002
 8001f3c:	ffff0000 	.word	0xffff0000

08001f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d006      	beq.n	8001f6a <I2C_MasterRequestWrite+0x2a>
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d003      	beq.n	8001f6a <I2C_MasterRequestWrite+0x2a>
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f68:	d108      	bne.n	8001f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e00b      	b.n	8001f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	2b12      	cmp	r3, #18
 8001f82:	d107      	bne.n	8001f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f84f 	bl	8002044 <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00d      	beq.n	8001fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fba:	d103      	bne.n	8001fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e035      	b.n	8002034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fd0:	d108      	bne.n	8001fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	e01b      	b.n	800201c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fe4:	897b      	ldrh	r3, [r7, #10]
 8001fe6:	11db      	asrs	r3, r3, #7
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 0306 	and.w	r3, r3, #6
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f063 030f 	orn	r3, r3, #15
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <I2C_MasterRequestWrite+0xfc>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f898 	bl	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e010      	b.n	8002034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <I2C_MasterRequestWrite+0x100>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f888 	bl	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	00010008 	.word	0x00010008
 8002040:	00010002 	.word	0x00010002

08002044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002054:	e048      	b.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d044      	beq.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff fa25 	bl	80014ac <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d139      	bne.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10d      	bne.n	800209a <I2C_WaitOnFlagUntilTimeout+0x56>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	43da      	mvns	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4013      	ands	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	e00c      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	43da      	mvns	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4013      	ands	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d116      	bne.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f043 0220 	orr.w	r2, r3, #32
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e023      	b.n	8002130 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10d      	bne.n	800210e <I2C_WaitOnFlagUntilTimeout+0xca>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	e00c      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	43da      	mvns	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4013      	ands	r3, r2
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d093      	beq.n	8002056 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002146:	e071      	b.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d123      	bne.n	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e067      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d041      	beq.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7ff f980 	bl	80014ac <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d302      	bcc.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d136      	bne.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10c      	bne.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4013      	ands	r3, r2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	bf14      	ite	ne
 80021da:	2301      	movne	r3, #1
 80021dc:	2300      	moveq	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e00b      	b.n	80021fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	43da      	mvns	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e021      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	0c1b      	lsrs	r3, r3, #16
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10c      	bne.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	43da      	mvns	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4013      	ands	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf14      	ite	ne
 8002248:	2301      	movne	r3, #1
 800224a:	2300      	moveq	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e00b      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f47f af6d 	bne.w	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002284:	e034      	b.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f886 	bl	8002398 <I2C_IsAcknowledgeFailed>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e034      	b.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d028      	beq.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff f905 	bl	80014ac <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11d      	bne.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d016      	beq.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0220 	orr.w	r2, r3, #32
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e007      	b.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d1c3      	bne.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002314:	e034      	b.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f83e 	bl	8002398 <I2C_IsAcknowledgeFailed>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e034      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d028      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f8bd 	bl	80014ac <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11d      	bne.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d016      	beq.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b04      	cmp	r3, #4
 800238c:	d1c3      	bne.n	8002316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d11b      	bne.n	80023e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0204 	orr.w	r2, r3, #4
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e26c      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00c      	beq.n	800243a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d112      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
 800242c:	4b8c      	ldr	r3, [pc, #560]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d10b      	bne.n	8002452 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243a:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d06c      	beq.n	8002520 <HAL_RCC_OscConfig+0x12c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d168      	bne.n	8002520 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e246      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x76>
 800245c:	4b80      	ldr	r3, [pc, #512]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7f      	ldr	r2, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e02e      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a7a      	ldr	r2, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a77      	ldr	r2, [pc, #476]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0xbc>
 8002496:	4b72      	ldr	r3, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a71      	ldr	r2, [pc, #452]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xd4>
 80024b0:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a67      	ldr	r2, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe ffec 	bl	80014ac <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe ffe8 	bl	80014ac <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1fa      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe4>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe ffd8 	bl	80014ac <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe ffd4 	bl	80014ac <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1e6      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x10c>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
 8002546:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1ba      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4939      	ldr	r1, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe ff8d 	bl	80014ac <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe ff89 	bl	80014ac <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e19b      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4927      	ldr	r1, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_OscConfig+0x270>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff6c 	bl	80014ac <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe ff68 	bl	80014ac <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e17a      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03a      	beq.n	8002678 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d019      	beq.n	800263e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe ff4c 	bl	80014ac <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe ff48 	bl	80014ac <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e15a      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_RCC_OscConfig+0x26c>)
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f000 fab8 	bl	8002bac <RCC_Delay>
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_RCC_OscConfig+0x274>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe ff32 	bl	80014ac <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264a:	e00f      	b.n	800266c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264c:	f7fe ff2e 	bl	80014ac <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d908      	bls.n	800266c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e140      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	42420000 	.word	0x42420000
 8002668:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b9e      	ldr	r3, [pc, #632]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e9      	bne.n	800264c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80a6 	beq.w	80027d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b97      	ldr	r3, [pc, #604]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a93      	ldr	r2, [pc, #588]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b8e      	ldr	r3, [pc, #568]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a8a      	ldr	r2, [pc, #552]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe feef 	bl	80014ac <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe feeb 	bl	80014ac <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0fd      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b81      	ldr	r3, [pc, #516]	; (80028ec <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 80026f8:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	e02d      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x334>
 800270e:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a72      	ldr	r2, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e01c      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x356>
 8002730:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x36e>
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a66      	ldr	r2, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a63      	ldr	r2, [pc, #396]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7fe fe9f 	bl	80014ac <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fe9b 	bl	80014ac <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0ab      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ee      	beq.n	8002772 <HAL_RCC_OscConfig+0x37e>
 8002794:	e014      	b.n	80027c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fe89 	bl	80014ac <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fe85 	bl	80014ac <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e095      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ee      	bne.n	800279e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a47      	ldr	r2, [pc, #284]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8081 	beq.w	80028de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d061      	beq.n	80028ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d146      	bne.n	800287e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fe59 	bl	80014ac <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fe55 	bl	80014ac <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e067      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d108      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	492d      	ldr	r1, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a19      	ldr	r1, [r3, #32]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	430b      	orrs	r3, r1
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe fe29 	bl	80014ac <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fe25 	bl	80014ac <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e037      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x46a>
 800287c:	e02f      	b.n	80028de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCC_OscConfig+0x4fc>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe fe12 	bl	80014ac <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fe0e 	bl	80014ac <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e020      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x498>
 80028aa:	e018      	b.n	80028de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e013      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42420060 	.word	0x42420060

080028f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d0      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4965      	ldr	r1, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800295a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002972:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d040      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d115      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e073      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 0203 	bic.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4936      	ldr	r1, [pc, #216]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fd62 	bl	80014ac <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ec:	f7fe fd5e 	bl	80014ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e053      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 020c 	and.w	r2, r3, #12
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1eb      	bne.n	80029ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d210      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4922      	ldr	r1, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fcc0 	bl	8001428 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08003cf0 	.word	0x08003cf0
 8002ac0:	2000004c 	.word	0x2000004c
 8002ac4:	20000050 	.word	0x20000050

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d002      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x36>
 8002af6:	e027      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	613b      	str	r3, [r7, #16]
      break;
 8002afc:	e027      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2a:	fb02 f203 	mul.w	r2, r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e004      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	693b      	ldr	r3, [r7, #16]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	08003d08 	.word	0x08003d08
 8002b68:	08003d18 	.word	0x08003d18
 8002b6c:	003d0900 	.word	0x003d0900

08002b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b76:	681b      	ldr	r3, [r3, #0]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	2000004c 	.word	0x2000004c

08002b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b88:	f7ff fff2 	bl	8002b70 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08003d00 	.word	0x08003d00

08002bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCC_Delay+0x34>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <RCC_Delay+0x38>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc8:	bf00      	nop
  }
  while (Delay --);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <RCC_Delay+0x1c>
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	2000004c 	.word	0x2000004c
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e041      	b.n	8002c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fb3c 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f000 fa5c 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d001      	beq.n	8002ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e03a      	b.n	8002d16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <HAL_TIM_Base_Start_IT+0x98>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00e      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x58>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x58>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0x58>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d010      	beq.n	8002d14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	e007      	b.n	8002d14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40000800 	.word	0x40000800

08002d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0202 	mvn.w	r2, #2
 8002d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f998 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f98b 	bl	800309a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f99a 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0204 	mvn.w	r2, #4
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f972 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f965 	bl	800309a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f974 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d020      	beq.n	8002e28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0208 	mvn.w	r2, #8
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f94c 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f93f 	bl	800309a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f94e 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d020      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01b      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f926 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f919 	bl	800309a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f928 	bl	80030be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0201 	mvn.w	r2, #1
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f910 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00c      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa7f 	bl	80033ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d007      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8f8 	bl	80030d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0220 	mvn.w	r2, #32
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa52 	bl	80033a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIM_ConfigClockSource+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0b4      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x186>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f60:	d03e      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	f200 8087 	bhi.w	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6e:	f000 8086 	beq.w	800307e <HAL_TIM_ConfigClockSource+0x172>
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f76:	d87f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d01a      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8002f7c:	2b70      	cmp	r3, #112	; 0x70
 8002f7e:	d87b      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d050      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x11a>
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d877      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d03c      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0xfa>
 8002f8c:	2b50      	cmp	r3, #80	; 0x50
 8002f8e:	d873      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d058      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x13a>
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d86f      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d064      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002f9c:	2b30      	cmp	r3, #48	; 0x30
 8002f9e:	d86b      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d060      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d867      	bhi.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d05c      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d05a      	beq.n	8003066 <HAL_TIM_ConfigClockSource+0x15a>
 8002fb0:	e062      	b.n	8003078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6899      	ldr	r1, [r3, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f000 f974 	bl	80032ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	609a      	str	r2, [r3, #8]
      break;
 8002fde:	e04f      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f000 f95d 	bl	80032ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003002:	609a      	str	r2, [r3, #8]
      break;
 8003004:	e03c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 f8d4 	bl	80031c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2150      	movs	r1, #80	; 0x50
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f92b 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003024:	e02c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	461a      	mov	r2, r3
 8003034:	f000 f8f2 	bl	800321c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2160      	movs	r1, #96	; 0x60
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f91b 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003044:	e01c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	461a      	mov	r2, r3
 8003054:	f000 f8b4 	bl	80031c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f90b 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003064:	e00c      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	4610      	mov	r0, r2
 8003072:	f000 f902 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8003076:	e003      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e000      	b.n	8003080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800307e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
	...

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a2f      	ldr	r2, [pc, #188]	; (80031b4 <TIM_Base_SetConfig+0xd0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00b      	beq.n	8003114 <TIM_Base_SetConfig+0x30>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d007      	beq.n	8003114 <TIM_Base_SetConfig+0x30>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <TIM_Base_SetConfig+0xd4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <TIM_Base_SetConfig+0x30>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <TIM_Base_SetConfig+0xd8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d108      	bne.n	8003126 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <TIM_Base_SetConfig+0xd0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1f      	ldr	r2, [pc, #124]	; (80031b8 <TIM_Base_SetConfig+0xd4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <TIM_Base_SetConfig+0xd8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <TIM_Base_SetConfig+0xd0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f023 0201 	bic.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
  }
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0210 	bic.w	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	031b      	lsls	r3, r3, #12
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003300:	2302      	movs	r3, #2
 8003302:	e046      	b.n	8003392 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d009      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10c      	bne.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	; (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000058 	.word	0x20000058

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	2600      	movs	r6, #0
 80033dc:	4d0c      	ldr	r5, [pc, #48]	; (8003410 <__libc_init_array+0x38>)
 80033de:	4c0d      	ldr	r4, [pc, #52]	; (8003414 <__libc_init_array+0x3c>)
 80033e0:	1b64      	subs	r4, r4, r5
 80033e2:	10a4      	asrs	r4, r4, #2
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	f000 fc5c 	bl	8003ca4 <_init>
 80033ec:	2600      	movs	r6, #0
 80033ee:	4d0a      	ldr	r5, [pc, #40]	; (8003418 <__libc_init_array+0x40>)
 80033f0:	4c0a      	ldr	r4, [pc, #40]	; (800341c <__libc_init_array+0x44>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	08003d50 	.word	0x08003d50
 8003414:	08003d50 	.word	0x08003d50
 8003418:	08003d50 	.word	0x08003d50
 800341c:	08003d54 	.word	0x08003d54

08003420 <memset>:
 8003420:	4603      	mov	r3, r0
 8003422:	4402      	add	r2, r0
 8003424:	4293      	cmp	r3, r2
 8003426:	d100      	bne.n	800342a <memset+0xa>
 8003428:	4770      	bx	lr
 800342a:	f803 1b01 	strb.w	r1, [r3], #1
 800342e:	e7f9      	b.n	8003424 <memset+0x4>

08003430 <siprintf>:
 8003430:	b40e      	push	{r1, r2, r3}
 8003432:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003436:	b500      	push	{lr}
 8003438:	b09c      	sub	sp, #112	; 0x70
 800343a:	ab1d      	add	r3, sp, #116	; 0x74
 800343c:	9002      	str	r0, [sp, #8]
 800343e:	9006      	str	r0, [sp, #24]
 8003440:	9107      	str	r1, [sp, #28]
 8003442:	9104      	str	r1, [sp, #16]
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <siprintf+0x38>)
 8003446:	4909      	ldr	r1, [pc, #36]	; (800346c <siprintf+0x3c>)
 8003448:	f853 2b04 	ldr.w	r2, [r3], #4
 800344c:	9105      	str	r1, [sp, #20]
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	a902      	add	r1, sp, #8
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	f000 f868 	bl	8003528 <_svfiprintf_r>
 8003458:	2200      	movs	r2, #0
 800345a:	9b02      	ldr	r3, [sp, #8]
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	b01c      	add	sp, #112	; 0x70
 8003460:	f85d eb04 	ldr.w	lr, [sp], #4
 8003464:	b003      	add	sp, #12
 8003466:	4770      	bx	lr
 8003468:	20000058 	.word	0x20000058
 800346c:	ffff0208 	.word	0xffff0208

08003470 <__ssputs_r>:
 8003470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	688e      	ldr	r6, [r1, #8]
 8003476:	4682      	mov	sl, r0
 8003478:	429e      	cmp	r6, r3
 800347a:	460c      	mov	r4, r1
 800347c:	4690      	mov	r8, r2
 800347e:	461f      	mov	r7, r3
 8003480:	d838      	bhi.n	80034f4 <__ssputs_r+0x84>
 8003482:	898a      	ldrh	r2, [r1, #12]
 8003484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003488:	d032      	beq.n	80034f0 <__ssputs_r+0x80>
 800348a:	6825      	ldr	r5, [r4, #0]
 800348c:	6909      	ldr	r1, [r1, #16]
 800348e:	3301      	adds	r3, #1
 8003490:	eba5 0901 	sub.w	r9, r5, r1
 8003494:	6965      	ldr	r5, [r4, #20]
 8003496:	444b      	add	r3, r9
 8003498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800349c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034a0:	106d      	asrs	r5, r5, #1
 80034a2:	429d      	cmp	r5, r3
 80034a4:	bf38      	it	cc
 80034a6:	461d      	movcc	r5, r3
 80034a8:	0553      	lsls	r3, r2, #21
 80034aa:	d531      	bpl.n	8003510 <__ssputs_r+0xa0>
 80034ac:	4629      	mov	r1, r5
 80034ae:	f000 fb53 	bl	8003b58 <_malloc_r>
 80034b2:	4606      	mov	r6, r0
 80034b4:	b950      	cbnz	r0, 80034cc <__ssputs_r+0x5c>
 80034b6:	230c      	movs	r3, #12
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f8ca 3000 	str.w	r3, [sl]
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034cc:	464a      	mov	r2, r9
 80034ce:	6921      	ldr	r1, [r4, #16]
 80034d0:	f000 face 	bl	8003a70 <memcpy>
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034de:	81a3      	strh	r3, [r4, #12]
 80034e0:	6126      	str	r6, [r4, #16]
 80034e2:	444e      	add	r6, r9
 80034e4:	6026      	str	r6, [r4, #0]
 80034e6:	463e      	mov	r6, r7
 80034e8:	6165      	str	r5, [r4, #20]
 80034ea:	eba5 0509 	sub.w	r5, r5, r9
 80034ee:	60a5      	str	r5, [r4, #8]
 80034f0:	42be      	cmp	r6, r7
 80034f2:	d900      	bls.n	80034f6 <__ssputs_r+0x86>
 80034f4:	463e      	mov	r6, r7
 80034f6:	4632      	mov	r2, r6
 80034f8:	4641      	mov	r1, r8
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	f000 fac6 	bl	8003a8c <memmove>
 8003500:	68a3      	ldr	r3, [r4, #8]
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	1b9b      	subs	r3, r3, r6
 8003506:	4432      	add	r2, r6
 8003508:	2000      	movs	r0, #0
 800350a:	60a3      	str	r3, [r4, #8]
 800350c:	6022      	str	r2, [r4, #0]
 800350e:	e7db      	b.n	80034c8 <__ssputs_r+0x58>
 8003510:	462a      	mov	r2, r5
 8003512:	f000 fb7b 	bl	8003c0c <_realloc_r>
 8003516:	4606      	mov	r6, r0
 8003518:	2800      	cmp	r0, #0
 800351a:	d1e1      	bne.n	80034e0 <__ssputs_r+0x70>
 800351c:	4650      	mov	r0, sl
 800351e:	6921      	ldr	r1, [r4, #16]
 8003520:	f000 face 	bl	8003ac0 <_free_r>
 8003524:	e7c7      	b.n	80034b6 <__ssputs_r+0x46>
	...

08003528 <_svfiprintf_r>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	4698      	mov	r8, r3
 800352e:	898b      	ldrh	r3, [r1, #12]
 8003530:	4607      	mov	r7, r0
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	460d      	mov	r5, r1
 8003536:	4614      	mov	r4, r2
 8003538:	b09d      	sub	sp, #116	; 0x74
 800353a:	d50e      	bpl.n	800355a <_svfiprintf_r+0x32>
 800353c:	690b      	ldr	r3, [r1, #16]
 800353e:	b963      	cbnz	r3, 800355a <_svfiprintf_r+0x32>
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	f000 fb09 	bl	8003b58 <_malloc_r>
 8003546:	6028      	str	r0, [r5, #0]
 8003548:	6128      	str	r0, [r5, #16]
 800354a:	b920      	cbnz	r0, 8003556 <_svfiprintf_r+0x2e>
 800354c:	230c      	movs	r3, #12
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	e0d1      	b.n	80036fa <_svfiprintf_r+0x1d2>
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	616b      	str	r3, [r5, #20]
 800355a:	2300      	movs	r3, #0
 800355c:	9309      	str	r3, [sp, #36]	; 0x24
 800355e:	2320      	movs	r3, #32
 8003560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003564:	2330      	movs	r3, #48	; 0x30
 8003566:	f04f 0901 	mov.w	r9, #1
 800356a:	f8cd 800c 	str.w	r8, [sp, #12]
 800356e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003714 <_svfiprintf_r+0x1ec>
 8003572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003576:	4623      	mov	r3, r4
 8003578:	469a      	mov	sl, r3
 800357a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800357e:	b10a      	cbz	r2, 8003584 <_svfiprintf_r+0x5c>
 8003580:	2a25      	cmp	r2, #37	; 0x25
 8003582:	d1f9      	bne.n	8003578 <_svfiprintf_r+0x50>
 8003584:	ebba 0b04 	subs.w	fp, sl, r4
 8003588:	d00b      	beq.n	80035a2 <_svfiprintf_r+0x7a>
 800358a:	465b      	mov	r3, fp
 800358c:	4622      	mov	r2, r4
 800358e:	4629      	mov	r1, r5
 8003590:	4638      	mov	r0, r7
 8003592:	f7ff ff6d 	bl	8003470 <__ssputs_r>
 8003596:	3001      	adds	r0, #1
 8003598:	f000 80aa 	beq.w	80036f0 <_svfiprintf_r+0x1c8>
 800359c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800359e:	445a      	add	r2, fp
 80035a0:	9209      	str	r2, [sp, #36]	; 0x24
 80035a2:	f89a 3000 	ldrb.w	r3, [sl]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80a2 	beq.w	80036f0 <_svfiprintf_r+0x1c8>
 80035ac:	2300      	movs	r3, #0
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295
 80035b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035b6:	f10a 0a01 	add.w	sl, sl, #1
 80035ba:	9304      	str	r3, [sp, #16]
 80035bc:	9307      	str	r3, [sp, #28]
 80035be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035c2:	931a      	str	r3, [sp, #104]	; 0x68
 80035c4:	4654      	mov	r4, sl
 80035c6:	2205      	movs	r2, #5
 80035c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035cc:	4851      	ldr	r0, [pc, #324]	; (8003714 <_svfiprintf_r+0x1ec>)
 80035ce:	f000 fa41 	bl	8003a54 <memchr>
 80035d2:	9a04      	ldr	r2, [sp, #16]
 80035d4:	b9d8      	cbnz	r0, 800360e <_svfiprintf_r+0xe6>
 80035d6:	06d0      	lsls	r0, r2, #27
 80035d8:	bf44      	itt	mi
 80035da:	2320      	movmi	r3, #32
 80035dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035e0:	0711      	lsls	r1, r2, #28
 80035e2:	bf44      	itt	mi
 80035e4:	232b      	movmi	r3, #43	; 0x2b
 80035e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ea:	f89a 3000 	ldrb.w	r3, [sl]
 80035ee:	2b2a      	cmp	r3, #42	; 0x2a
 80035f0:	d015      	beq.n	800361e <_svfiprintf_r+0xf6>
 80035f2:	4654      	mov	r4, sl
 80035f4:	2000      	movs	r0, #0
 80035f6:	f04f 0c0a 	mov.w	ip, #10
 80035fa:	9a07      	ldr	r2, [sp, #28]
 80035fc:	4621      	mov	r1, r4
 80035fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003602:	3b30      	subs	r3, #48	; 0x30
 8003604:	2b09      	cmp	r3, #9
 8003606:	d94e      	bls.n	80036a6 <_svfiprintf_r+0x17e>
 8003608:	b1b0      	cbz	r0, 8003638 <_svfiprintf_r+0x110>
 800360a:	9207      	str	r2, [sp, #28]
 800360c:	e014      	b.n	8003638 <_svfiprintf_r+0x110>
 800360e:	eba0 0308 	sub.w	r3, r0, r8
 8003612:	fa09 f303 	lsl.w	r3, r9, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	46a2      	mov	sl, r4
 800361a:	9304      	str	r3, [sp, #16]
 800361c:	e7d2      	b.n	80035c4 <_svfiprintf_r+0x9c>
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	1d19      	adds	r1, r3, #4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	9103      	str	r1, [sp, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	bfbb      	ittet	lt
 800362a:	425b      	neglt	r3, r3
 800362c:	f042 0202 	orrlt.w	r2, r2, #2
 8003630:	9307      	strge	r3, [sp, #28]
 8003632:	9307      	strlt	r3, [sp, #28]
 8003634:	bfb8      	it	lt
 8003636:	9204      	strlt	r2, [sp, #16]
 8003638:	7823      	ldrb	r3, [r4, #0]
 800363a:	2b2e      	cmp	r3, #46	; 0x2e
 800363c:	d10c      	bne.n	8003658 <_svfiprintf_r+0x130>
 800363e:	7863      	ldrb	r3, [r4, #1]
 8003640:	2b2a      	cmp	r3, #42	; 0x2a
 8003642:	d135      	bne.n	80036b0 <_svfiprintf_r+0x188>
 8003644:	9b03      	ldr	r3, [sp, #12]
 8003646:	3402      	adds	r4, #2
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	9203      	str	r2, [sp, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	bfb8      	it	lt
 8003652:	f04f 33ff 	movlt.w	r3, #4294967295
 8003656:	9305      	str	r3, [sp, #20]
 8003658:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003724 <_svfiprintf_r+0x1fc>
 800365c:	2203      	movs	r2, #3
 800365e:	4650      	mov	r0, sl
 8003660:	7821      	ldrb	r1, [r4, #0]
 8003662:	f000 f9f7 	bl	8003a54 <memchr>
 8003666:	b140      	cbz	r0, 800367a <_svfiprintf_r+0x152>
 8003668:	2340      	movs	r3, #64	; 0x40
 800366a:	eba0 000a 	sub.w	r0, r0, sl
 800366e:	fa03 f000 	lsl.w	r0, r3, r0
 8003672:	9b04      	ldr	r3, [sp, #16]
 8003674:	3401      	adds	r4, #1
 8003676:	4303      	orrs	r3, r0
 8003678:	9304      	str	r3, [sp, #16]
 800367a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800367e:	2206      	movs	r2, #6
 8003680:	4825      	ldr	r0, [pc, #148]	; (8003718 <_svfiprintf_r+0x1f0>)
 8003682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003686:	f000 f9e5 	bl	8003a54 <memchr>
 800368a:	2800      	cmp	r0, #0
 800368c:	d038      	beq.n	8003700 <_svfiprintf_r+0x1d8>
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <_svfiprintf_r+0x1f4>)
 8003690:	bb1b      	cbnz	r3, 80036da <_svfiprintf_r+0x1b2>
 8003692:	9b03      	ldr	r3, [sp, #12]
 8003694:	3307      	adds	r3, #7
 8003696:	f023 0307 	bic.w	r3, r3, #7
 800369a:	3308      	adds	r3, #8
 800369c:	9303      	str	r3, [sp, #12]
 800369e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a0:	4433      	add	r3, r6
 80036a2:	9309      	str	r3, [sp, #36]	; 0x24
 80036a4:	e767      	b.n	8003576 <_svfiprintf_r+0x4e>
 80036a6:	460c      	mov	r4, r1
 80036a8:	2001      	movs	r0, #1
 80036aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80036ae:	e7a5      	b.n	80035fc <_svfiprintf_r+0xd4>
 80036b0:	2300      	movs	r3, #0
 80036b2:	f04f 0c0a 	mov.w	ip, #10
 80036b6:	4619      	mov	r1, r3
 80036b8:	3401      	adds	r4, #1
 80036ba:	9305      	str	r3, [sp, #20]
 80036bc:	4620      	mov	r0, r4
 80036be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036c2:	3a30      	subs	r2, #48	; 0x30
 80036c4:	2a09      	cmp	r2, #9
 80036c6:	d903      	bls.n	80036d0 <_svfiprintf_r+0x1a8>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0c5      	beq.n	8003658 <_svfiprintf_r+0x130>
 80036cc:	9105      	str	r1, [sp, #20]
 80036ce:	e7c3      	b.n	8003658 <_svfiprintf_r+0x130>
 80036d0:	4604      	mov	r4, r0
 80036d2:	2301      	movs	r3, #1
 80036d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80036d8:	e7f0      	b.n	80036bc <_svfiprintf_r+0x194>
 80036da:	ab03      	add	r3, sp, #12
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	462a      	mov	r2, r5
 80036e0:	4638      	mov	r0, r7
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <_svfiprintf_r+0x1f8>)
 80036e4:	a904      	add	r1, sp, #16
 80036e6:	f3af 8000 	nop.w
 80036ea:	1c42      	adds	r2, r0, #1
 80036ec:	4606      	mov	r6, r0
 80036ee:	d1d6      	bne.n	800369e <_svfiprintf_r+0x176>
 80036f0:	89ab      	ldrh	r3, [r5, #12]
 80036f2:	065b      	lsls	r3, r3, #25
 80036f4:	f53f af2c 	bmi.w	8003550 <_svfiprintf_r+0x28>
 80036f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036fa:	b01d      	add	sp, #116	; 0x74
 80036fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003700:	ab03      	add	r3, sp, #12
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	462a      	mov	r2, r5
 8003706:	4638      	mov	r0, r7
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <_svfiprintf_r+0x1f8>)
 800370a:	a904      	add	r1, sp, #16
 800370c:	f000 f87c 	bl	8003808 <_printf_i>
 8003710:	e7eb      	b.n	80036ea <_svfiprintf_r+0x1c2>
 8003712:	bf00      	nop
 8003714:	08003d1a 	.word	0x08003d1a
 8003718:	08003d24 	.word	0x08003d24
 800371c:	00000000 	.word	0x00000000
 8003720:	08003471 	.word	0x08003471
 8003724:	08003d20 	.word	0x08003d20

08003728 <_printf_common>:
 8003728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	4616      	mov	r6, r2
 800372e:	4699      	mov	r9, r3
 8003730:	688a      	ldr	r2, [r1, #8]
 8003732:	690b      	ldr	r3, [r1, #16]
 8003734:	4607      	mov	r7, r0
 8003736:	4293      	cmp	r3, r2
 8003738:	bfb8      	it	lt
 800373a:	4613      	movlt	r3, r2
 800373c:	6033      	str	r3, [r6, #0]
 800373e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003742:	460c      	mov	r4, r1
 8003744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003748:	b10a      	cbz	r2, 800374e <_printf_common+0x26>
 800374a:	3301      	adds	r3, #1
 800374c:	6033      	str	r3, [r6, #0]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	0699      	lsls	r1, r3, #26
 8003752:	bf42      	ittt	mi
 8003754:	6833      	ldrmi	r3, [r6, #0]
 8003756:	3302      	addmi	r3, #2
 8003758:	6033      	strmi	r3, [r6, #0]
 800375a:	6825      	ldr	r5, [r4, #0]
 800375c:	f015 0506 	ands.w	r5, r5, #6
 8003760:	d106      	bne.n	8003770 <_printf_common+0x48>
 8003762:	f104 0a19 	add.w	sl, r4, #25
 8003766:	68e3      	ldr	r3, [r4, #12]
 8003768:	6832      	ldr	r2, [r6, #0]
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	42ab      	cmp	r3, r5
 800376e:	dc28      	bgt.n	80037c2 <_printf_common+0x9a>
 8003770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003774:	1e13      	subs	r3, r2, #0
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	bf18      	it	ne
 800377a:	2301      	movne	r3, #1
 800377c:	0692      	lsls	r2, r2, #26
 800377e:	d42d      	bmi.n	80037dc <_printf_common+0xb4>
 8003780:	4649      	mov	r1, r9
 8003782:	4638      	mov	r0, r7
 8003784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003788:	47c0      	blx	r8
 800378a:	3001      	adds	r0, #1
 800378c:	d020      	beq.n	80037d0 <_printf_common+0xa8>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	68e5      	ldr	r5, [r4, #12]
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf18      	it	ne
 800379a:	2500      	movne	r5, #0
 800379c:	6832      	ldr	r2, [r6, #0]
 800379e:	f04f 0600 	mov.w	r6, #0
 80037a2:	68a3      	ldr	r3, [r4, #8]
 80037a4:	bf08      	it	eq
 80037a6:	1aad      	subeq	r5, r5, r2
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	bf08      	it	eq
 80037ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bfc4      	itt	gt
 80037b4:	1a9b      	subgt	r3, r3, r2
 80037b6:	18ed      	addgt	r5, r5, r3
 80037b8:	341a      	adds	r4, #26
 80037ba:	42b5      	cmp	r5, r6
 80037bc:	d11a      	bne.n	80037f4 <_printf_common+0xcc>
 80037be:	2000      	movs	r0, #0
 80037c0:	e008      	b.n	80037d4 <_printf_common+0xac>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4652      	mov	r2, sl
 80037c6:	4649      	mov	r1, r9
 80037c8:	4638      	mov	r0, r7
 80037ca:	47c0      	blx	r8
 80037cc:	3001      	adds	r0, #1
 80037ce:	d103      	bne.n	80037d8 <_printf_common+0xb0>
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d8:	3501      	adds	r5, #1
 80037da:	e7c4      	b.n	8003766 <_printf_common+0x3e>
 80037dc:	2030      	movs	r0, #48	; 0x30
 80037de:	18e1      	adds	r1, r4, r3
 80037e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ea:	4422      	add	r2, r4
 80037ec:	3302      	adds	r3, #2
 80037ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f2:	e7c5      	b.n	8003780 <_printf_common+0x58>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4622      	mov	r2, r4
 80037f8:	4649      	mov	r1, r9
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d0e6      	beq.n	80037d0 <_printf_common+0xa8>
 8003802:	3601      	adds	r6, #1
 8003804:	e7d9      	b.n	80037ba <_printf_common+0x92>
	...

08003808 <_printf_i>:
 8003808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	460c      	mov	r4, r1
 800380e:	7e27      	ldrb	r7, [r4, #24]
 8003810:	4691      	mov	r9, r2
 8003812:	2f78      	cmp	r7, #120	; 0x78
 8003814:	4680      	mov	r8, r0
 8003816:	469a      	mov	sl, r3
 8003818:	990c      	ldr	r1, [sp, #48]	; 0x30
 800381a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800381e:	d807      	bhi.n	8003830 <_printf_i+0x28>
 8003820:	2f62      	cmp	r7, #98	; 0x62
 8003822:	d80a      	bhi.n	800383a <_printf_i+0x32>
 8003824:	2f00      	cmp	r7, #0
 8003826:	f000 80d9 	beq.w	80039dc <_printf_i+0x1d4>
 800382a:	2f58      	cmp	r7, #88	; 0x58
 800382c:	f000 80a4 	beq.w	8003978 <_printf_i+0x170>
 8003830:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003838:	e03a      	b.n	80038b0 <_printf_i+0xa8>
 800383a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800383e:	2b15      	cmp	r3, #21
 8003840:	d8f6      	bhi.n	8003830 <_printf_i+0x28>
 8003842:	a001      	add	r0, pc, #4	; (adr r0, 8003848 <_printf_i+0x40>)
 8003844:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003848:	080038a1 	.word	0x080038a1
 800384c:	080038b5 	.word	0x080038b5
 8003850:	08003831 	.word	0x08003831
 8003854:	08003831 	.word	0x08003831
 8003858:	08003831 	.word	0x08003831
 800385c:	08003831 	.word	0x08003831
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003831 	.word	0x08003831
 8003868:	08003831 	.word	0x08003831
 800386c:	08003831 	.word	0x08003831
 8003870:	08003831 	.word	0x08003831
 8003874:	080039c3 	.word	0x080039c3
 8003878:	080038e5 	.word	0x080038e5
 800387c:	080039a5 	.word	0x080039a5
 8003880:	08003831 	.word	0x08003831
 8003884:	08003831 	.word	0x08003831
 8003888:	080039e5 	.word	0x080039e5
 800388c:	08003831 	.word	0x08003831
 8003890:	080038e5 	.word	0x080038e5
 8003894:	08003831 	.word	0x08003831
 8003898:	08003831 	.word	0x08003831
 800389c:	080039ad 	.word	0x080039ad
 80038a0:	680b      	ldr	r3, [r1, #0]
 80038a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	600a      	str	r2, [r1, #0]
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0a4      	b.n	80039fe <_printf_i+0x1f6>
 80038b4:	6825      	ldr	r5, [r4, #0]
 80038b6:	6808      	ldr	r0, [r1, #0]
 80038b8:	062e      	lsls	r6, r5, #24
 80038ba:	f100 0304 	add.w	r3, r0, #4
 80038be:	d50a      	bpl.n	80038d6 <_printf_i+0xce>
 80038c0:	6805      	ldr	r5, [r0, #0]
 80038c2:	600b      	str	r3, [r1, #0]
 80038c4:	2d00      	cmp	r5, #0
 80038c6:	da03      	bge.n	80038d0 <_printf_i+0xc8>
 80038c8:	232d      	movs	r3, #45	; 0x2d
 80038ca:	426d      	negs	r5, r5
 80038cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d0:	230a      	movs	r3, #10
 80038d2:	485e      	ldr	r0, [pc, #376]	; (8003a4c <_printf_i+0x244>)
 80038d4:	e019      	b.n	800390a <_printf_i+0x102>
 80038d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038da:	6805      	ldr	r5, [r0, #0]
 80038dc:	600b      	str	r3, [r1, #0]
 80038de:	bf18      	it	ne
 80038e0:	b22d      	sxthne	r5, r5
 80038e2:	e7ef      	b.n	80038c4 <_printf_i+0xbc>
 80038e4:	680b      	ldr	r3, [r1, #0]
 80038e6:	6825      	ldr	r5, [r4, #0]
 80038e8:	1d18      	adds	r0, r3, #4
 80038ea:	6008      	str	r0, [r1, #0]
 80038ec:	0628      	lsls	r0, r5, #24
 80038ee:	d501      	bpl.n	80038f4 <_printf_i+0xec>
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	e002      	b.n	80038fa <_printf_i+0xf2>
 80038f4:	0669      	lsls	r1, r5, #25
 80038f6:	d5fb      	bpl.n	80038f0 <_printf_i+0xe8>
 80038f8:	881d      	ldrh	r5, [r3, #0]
 80038fa:	2f6f      	cmp	r7, #111	; 0x6f
 80038fc:	bf0c      	ite	eq
 80038fe:	2308      	moveq	r3, #8
 8003900:	230a      	movne	r3, #10
 8003902:	4852      	ldr	r0, [pc, #328]	; (8003a4c <_printf_i+0x244>)
 8003904:	2100      	movs	r1, #0
 8003906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800390a:	6866      	ldr	r6, [r4, #4]
 800390c:	2e00      	cmp	r6, #0
 800390e:	bfa8      	it	ge
 8003910:	6821      	ldrge	r1, [r4, #0]
 8003912:	60a6      	str	r6, [r4, #8]
 8003914:	bfa4      	itt	ge
 8003916:	f021 0104 	bicge.w	r1, r1, #4
 800391a:	6021      	strge	r1, [r4, #0]
 800391c:	b90d      	cbnz	r5, 8003922 <_printf_i+0x11a>
 800391e:	2e00      	cmp	r6, #0
 8003920:	d04d      	beq.n	80039be <_printf_i+0x1b6>
 8003922:	4616      	mov	r6, r2
 8003924:	fbb5 f1f3 	udiv	r1, r5, r3
 8003928:	fb03 5711 	mls	r7, r3, r1, r5
 800392c:	5dc7      	ldrb	r7, [r0, r7]
 800392e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003932:	462f      	mov	r7, r5
 8003934:	42bb      	cmp	r3, r7
 8003936:	460d      	mov	r5, r1
 8003938:	d9f4      	bls.n	8003924 <_printf_i+0x11c>
 800393a:	2b08      	cmp	r3, #8
 800393c:	d10b      	bne.n	8003956 <_printf_i+0x14e>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	07df      	lsls	r7, r3, #31
 8003942:	d508      	bpl.n	8003956 <_printf_i+0x14e>
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	6861      	ldr	r1, [r4, #4]
 8003948:	4299      	cmp	r1, r3
 800394a:	bfde      	ittt	le
 800394c:	2330      	movle	r3, #48	; 0x30
 800394e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003952:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003956:	1b92      	subs	r2, r2, r6
 8003958:	6122      	str	r2, [r4, #16]
 800395a:	464b      	mov	r3, r9
 800395c:	4621      	mov	r1, r4
 800395e:	4640      	mov	r0, r8
 8003960:	f8cd a000 	str.w	sl, [sp]
 8003964:	aa03      	add	r2, sp, #12
 8003966:	f7ff fedf 	bl	8003728 <_printf_common>
 800396a:	3001      	adds	r0, #1
 800396c:	d14c      	bne.n	8003a08 <_printf_i+0x200>
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	b004      	add	sp, #16
 8003974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003978:	4834      	ldr	r0, [pc, #208]	; (8003a4c <_printf_i+0x244>)
 800397a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800397e:	680e      	ldr	r6, [r1, #0]
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f856 5b04 	ldr.w	r5, [r6], #4
 8003986:	061f      	lsls	r7, r3, #24
 8003988:	600e      	str	r6, [r1, #0]
 800398a:	d514      	bpl.n	80039b6 <_printf_i+0x1ae>
 800398c:	07d9      	lsls	r1, r3, #31
 800398e:	bf44      	itt	mi
 8003990:	f043 0320 	orrmi.w	r3, r3, #32
 8003994:	6023      	strmi	r3, [r4, #0]
 8003996:	b91d      	cbnz	r5, 80039a0 <_printf_i+0x198>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	f023 0320 	bic.w	r3, r3, #32
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	2310      	movs	r3, #16
 80039a2:	e7af      	b.n	8003904 <_printf_i+0xfc>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	f043 0320 	orr.w	r3, r3, #32
 80039aa:	6023      	str	r3, [r4, #0]
 80039ac:	2378      	movs	r3, #120	; 0x78
 80039ae:	4828      	ldr	r0, [pc, #160]	; (8003a50 <_printf_i+0x248>)
 80039b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039b4:	e7e3      	b.n	800397e <_printf_i+0x176>
 80039b6:	065e      	lsls	r6, r3, #25
 80039b8:	bf48      	it	mi
 80039ba:	b2ad      	uxthmi	r5, r5
 80039bc:	e7e6      	b.n	800398c <_printf_i+0x184>
 80039be:	4616      	mov	r6, r2
 80039c0:	e7bb      	b.n	800393a <_printf_i+0x132>
 80039c2:	680b      	ldr	r3, [r1, #0]
 80039c4:	6826      	ldr	r6, [r4, #0]
 80039c6:	1d1d      	adds	r5, r3, #4
 80039c8:	6960      	ldr	r0, [r4, #20]
 80039ca:	600d      	str	r5, [r1, #0]
 80039cc:	0635      	lsls	r5, r6, #24
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	d501      	bpl.n	80039d6 <_printf_i+0x1ce>
 80039d2:	6018      	str	r0, [r3, #0]
 80039d4:	e002      	b.n	80039dc <_printf_i+0x1d4>
 80039d6:	0671      	lsls	r1, r6, #25
 80039d8:	d5fb      	bpl.n	80039d2 <_printf_i+0x1ca>
 80039da:	8018      	strh	r0, [r3, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	4616      	mov	r6, r2
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	e7ba      	b.n	800395a <_printf_i+0x152>
 80039e4:	680b      	ldr	r3, [r1, #0]
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	600a      	str	r2, [r1, #0]
 80039ea:	681e      	ldr	r6, [r3, #0]
 80039ec:	2100      	movs	r1, #0
 80039ee:	4630      	mov	r0, r6
 80039f0:	6862      	ldr	r2, [r4, #4]
 80039f2:	f000 f82f 	bl	8003a54 <memchr>
 80039f6:	b108      	cbz	r0, 80039fc <_printf_i+0x1f4>
 80039f8:	1b80      	subs	r0, r0, r6
 80039fa:	6060      	str	r0, [r4, #4]
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	6123      	str	r3, [r4, #16]
 8003a00:	2300      	movs	r3, #0
 8003a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a06:	e7a8      	b.n	800395a <_printf_i+0x152>
 8003a08:	4632      	mov	r2, r6
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	47d0      	blx	sl
 8003a12:	3001      	adds	r0, #1
 8003a14:	d0ab      	beq.n	800396e <_printf_i+0x166>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	079b      	lsls	r3, r3, #30
 8003a1a:	d413      	bmi.n	8003a44 <_printf_i+0x23c>
 8003a1c:	68e0      	ldr	r0, [r4, #12]
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	4298      	cmp	r0, r3
 8003a22:	bfb8      	it	lt
 8003a24:	4618      	movlt	r0, r3
 8003a26:	e7a4      	b.n	8003972 <_printf_i+0x16a>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4632      	mov	r2, r6
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	4640      	mov	r0, r8
 8003a30:	47d0      	blx	sl
 8003a32:	3001      	adds	r0, #1
 8003a34:	d09b      	beq.n	800396e <_printf_i+0x166>
 8003a36:	3501      	adds	r5, #1
 8003a38:	68e3      	ldr	r3, [r4, #12]
 8003a3a:	9903      	ldr	r1, [sp, #12]
 8003a3c:	1a5b      	subs	r3, r3, r1
 8003a3e:	42ab      	cmp	r3, r5
 8003a40:	dcf2      	bgt.n	8003a28 <_printf_i+0x220>
 8003a42:	e7eb      	b.n	8003a1c <_printf_i+0x214>
 8003a44:	2500      	movs	r5, #0
 8003a46:	f104 0619 	add.w	r6, r4, #25
 8003a4a:	e7f5      	b.n	8003a38 <_printf_i+0x230>
 8003a4c:	08003d2b 	.word	0x08003d2b
 8003a50:	08003d3c 	.word	0x08003d3c

08003a54 <memchr>:
 8003a54:	4603      	mov	r3, r0
 8003a56:	b510      	push	{r4, lr}
 8003a58:	b2c9      	uxtb	r1, r1
 8003a5a:	4402      	add	r2, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	d101      	bne.n	8003a66 <memchr+0x12>
 8003a62:	2000      	movs	r0, #0
 8003a64:	e003      	b.n	8003a6e <memchr+0x1a>
 8003a66:	7804      	ldrb	r4, [r0, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	428c      	cmp	r4, r1
 8003a6c:	d1f6      	bne.n	8003a5c <memchr+0x8>
 8003a6e:	bd10      	pop	{r4, pc}

08003a70 <memcpy>:
 8003a70:	440a      	add	r2, r1
 8003a72:	4291      	cmp	r1, r2
 8003a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a78:	d100      	bne.n	8003a7c <memcpy+0xc>
 8003a7a:	4770      	bx	lr
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a82:	4291      	cmp	r1, r2
 8003a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a88:	d1f9      	bne.n	8003a7e <memcpy+0xe>
 8003a8a:	bd10      	pop	{r4, pc}

08003a8c <memmove>:
 8003a8c:	4288      	cmp	r0, r1
 8003a8e:	b510      	push	{r4, lr}
 8003a90:	eb01 0402 	add.w	r4, r1, r2
 8003a94:	d902      	bls.n	8003a9c <memmove+0x10>
 8003a96:	4284      	cmp	r4, r0
 8003a98:	4623      	mov	r3, r4
 8003a9a:	d807      	bhi.n	8003aac <memmove+0x20>
 8003a9c:	1e43      	subs	r3, r0, #1
 8003a9e:	42a1      	cmp	r1, r4
 8003aa0:	d008      	beq.n	8003ab4 <memmove+0x28>
 8003aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aaa:	e7f8      	b.n	8003a9e <memmove+0x12>
 8003aac:	4601      	mov	r1, r0
 8003aae:	4402      	add	r2, r0
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	d100      	bne.n	8003ab6 <memmove+0x2a>
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003abe:	e7f7      	b.n	8003ab0 <memmove+0x24>

08003ac0 <_free_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	d043      	beq.n	8003b50 <_free_r+0x90>
 8003ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003acc:	1f0c      	subs	r4, r1, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfb8      	it	lt
 8003ad2:	18e4      	addlt	r4, r4, r3
 8003ad4:	f000 f8d0 	bl	8003c78 <__malloc_lock>
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <_free_r+0x94>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	4610      	mov	r0, r2
 8003ade:	b933      	cbnz	r3, 8003aee <_free_r+0x2e>
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6014      	str	r4, [r2, #0]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aea:	f000 b8cb 	b.w	8003c84 <__malloc_unlock>
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	d90a      	bls.n	8003b08 <_free_r+0x48>
 8003af2:	6821      	ldr	r1, [r4, #0]
 8003af4:	1862      	adds	r2, r4, r1
 8003af6:	4293      	cmp	r3, r2
 8003af8:	bf01      	itttt	eq
 8003afa:	681a      	ldreq	r2, [r3, #0]
 8003afc:	685b      	ldreq	r3, [r3, #4]
 8003afe:	1852      	addeq	r2, r2, r1
 8003b00:	6022      	streq	r2, [r4, #0]
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	6004      	str	r4, [r0, #0]
 8003b06:	e7ed      	b.n	8003ae4 <_free_r+0x24>
 8003b08:	461a      	mov	r2, r3
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	b10b      	cbz	r3, 8003b12 <_free_r+0x52>
 8003b0e:	42a3      	cmp	r3, r4
 8003b10:	d9fa      	bls.n	8003b08 <_free_r+0x48>
 8003b12:	6811      	ldr	r1, [r2, #0]
 8003b14:	1850      	adds	r0, r2, r1
 8003b16:	42a0      	cmp	r0, r4
 8003b18:	d10b      	bne.n	8003b32 <_free_r+0x72>
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	4401      	add	r1, r0
 8003b1e:	1850      	adds	r0, r2, r1
 8003b20:	4283      	cmp	r3, r0
 8003b22:	6011      	str	r1, [r2, #0]
 8003b24:	d1de      	bne.n	8003ae4 <_free_r+0x24>
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	6053      	str	r3, [r2, #4]
 8003b30:	e7d8      	b.n	8003ae4 <_free_r+0x24>
 8003b32:	d902      	bls.n	8003b3a <_free_r+0x7a>
 8003b34:	230c      	movs	r3, #12
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	e7d4      	b.n	8003ae4 <_free_r+0x24>
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	1821      	adds	r1, r4, r0
 8003b3e:	428b      	cmp	r3, r1
 8003b40:	bf01      	itttt	eq
 8003b42:	6819      	ldreq	r1, [r3, #0]
 8003b44:	685b      	ldreq	r3, [r3, #4]
 8003b46:	1809      	addeq	r1, r1, r0
 8003b48:	6021      	streq	r1, [r4, #0]
 8003b4a:	6063      	str	r3, [r4, #4]
 8003b4c:	6054      	str	r4, [r2, #4]
 8003b4e:	e7c9      	b.n	8003ae4 <_free_r+0x24>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	200000fc 	.word	0x200000fc

08003b58 <_malloc_r>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	1ccd      	adds	r5, r1, #3
 8003b5c:	f025 0503 	bic.w	r5, r5, #3
 8003b60:	3508      	adds	r5, #8
 8003b62:	2d0c      	cmp	r5, #12
 8003b64:	bf38      	it	cc
 8003b66:	250c      	movcc	r5, #12
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	db01      	blt.n	8003b72 <_malloc_r+0x1a>
 8003b6e:	42a9      	cmp	r1, r5
 8003b70:	d903      	bls.n	8003b7a <_malloc_r+0x22>
 8003b72:	230c      	movs	r3, #12
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	2000      	movs	r0, #0
 8003b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b7a:	f000 f87d 	bl	8003c78 <__malloc_lock>
 8003b7e:	4921      	ldr	r1, [pc, #132]	; (8003c04 <_malloc_r+0xac>)
 8003b80:	680a      	ldr	r2, [r1, #0]
 8003b82:	4614      	mov	r4, r2
 8003b84:	b99c      	cbnz	r4, 8003bae <_malloc_r+0x56>
 8003b86:	4f20      	ldr	r7, [pc, #128]	; (8003c08 <_malloc_r+0xb0>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	b923      	cbnz	r3, 8003b96 <_malloc_r+0x3e>
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f000 f862 	bl	8003c58 <_sbrk_r>
 8003b94:	6038      	str	r0, [r7, #0]
 8003b96:	4629      	mov	r1, r5
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f000 f85d 	bl	8003c58 <_sbrk_r>
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	d123      	bne.n	8003bea <_malloc_r+0x92>
 8003ba2:	230c      	movs	r3, #12
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	6033      	str	r3, [r6, #0]
 8003ba8:	f000 f86c 	bl	8003c84 <__malloc_unlock>
 8003bac:	e7e3      	b.n	8003b76 <_malloc_r+0x1e>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	1b5b      	subs	r3, r3, r5
 8003bb2:	d417      	bmi.n	8003be4 <_malloc_r+0x8c>
 8003bb4:	2b0b      	cmp	r3, #11
 8003bb6:	d903      	bls.n	8003bc0 <_malloc_r+0x68>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	441c      	add	r4, r3
 8003bbc:	6025      	str	r5, [r4, #0]
 8003bbe:	e004      	b.n	8003bca <_malloc_r+0x72>
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	42a2      	cmp	r2, r4
 8003bc4:	bf0c      	ite	eq
 8003bc6:	600b      	streq	r3, [r1, #0]
 8003bc8:	6053      	strne	r3, [r2, #4]
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f000 f85a 	bl	8003c84 <__malloc_unlock>
 8003bd0:	f104 000b 	add.w	r0, r4, #11
 8003bd4:	1d23      	adds	r3, r4, #4
 8003bd6:	f020 0007 	bic.w	r0, r0, #7
 8003bda:	1ac2      	subs	r2, r0, r3
 8003bdc:	d0cc      	beq.n	8003b78 <_malloc_r+0x20>
 8003bde:	1a1b      	subs	r3, r3, r0
 8003be0:	50a3      	str	r3, [r4, r2]
 8003be2:	e7c9      	b.n	8003b78 <_malloc_r+0x20>
 8003be4:	4622      	mov	r2, r4
 8003be6:	6864      	ldr	r4, [r4, #4]
 8003be8:	e7cc      	b.n	8003b84 <_malloc_r+0x2c>
 8003bea:	1cc4      	adds	r4, r0, #3
 8003bec:	f024 0403 	bic.w	r4, r4, #3
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d0e3      	beq.n	8003bbc <_malloc_r+0x64>
 8003bf4:	1a21      	subs	r1, r4, r0
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f82e 	bl	8003c58 <_sbrk_r>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d1dd      	bne.n	8003bbc <_malloc_r+0x64>
 8003c00:	e7cf      	b.n	8003ba2 <_malloc_r+0x4a>
 8003c02:	bf00      	nop
 8003c04:	200000fc 	.word	0x200000fc
 8003c08:	20000100 	.word	0x20000100

08003c0c <_realloc_r>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	4607      	mov	r7, r0
 8003c10:	4614      	mov	r4, r2
 8003c12:	460e      	mov	r6, r1
 8003c14:	b921      	cbnz	r1, 8003c20 <_realloc_r+0x14>
 8003c16:	4611      	mov	r1, r2
 8003c18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c1c:	f7ff bf9c 	b.w	8003b58 <_malloc_r>
 8003c20:	b922      	cbnz	r2, 8003c2c <_realloc_r+0x20>
 8003c22:	f7ff ff4d 	bl	8003ac0 <_free_r>
 8003c26:	4625      	mov	r5, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2c:	f000 f830 	bl	8003c90 <_malloc_usable_size_r>
 8003c30:	42a0      	cmp	r0, r4
 8003c32:	d20f      	bcs.n	8003c54 <_realloc_r+0x48>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4638      	mov	r0, r7
 8003c38:	f7ff ff8e 	bl	8003b58 <_malloc_r>
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0f2      	beq.n	8003c28 <_realloc_r+0x1c>
 8003c42:	4631      	mov	r1, r6
 8003c44:	4622      	mov	r2, r4
 8003c46:	f7ff ff13 	bl	8003a70 <memcpy>
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f7ff ff37 	bl	8003ac0 <_free_r>
 8003c52:	e7e9      	b.n	8003c28 <_realloc_r+0x1c>
 8003c54:	4635      	mov	r5, r6
 8003c56:	e7e7      	b.n	8003c28 <_realloc_r+0x1c>

08003c58 <_sbrk_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4d05      	ldr	r5, [pc, #20]	; (8003c74 <_sbrk_r+0x1c>)
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	602b      	str	r3, [r5, #0]
 8003c64:	f7fd fb68 	bl	8001338 <_sbrk>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_sbrk_r+0x1a>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_sbrk_r+0x1a>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	200001bc 	.word	0x200001bc

08003c78 <__malloc_lock>:
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <__malloc_lock+0x8>)
 8003c7a:	f000 b811 	b.w	8003ca0 <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	200001c4 	.word	0x200001c4

08003c84 <__malloc_unlock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__malloc_unlock+0x8>)
 8003c86:	f000 b80c 	b.w	8003ca2 <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	200001c4 	.word	0x200001c4

08003c90 <_malloc_usable_size_r>:
 8003c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c94:	1f18      	subs	r0, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bfbc      	itt	lt
 8003c9a:	580b      	ldrlt	r3, [r1, r0]
 8003c9c:	18c0      	addlt	r0, r0, r3
 8003c9e:	4770      	bx	lr

08003ca0 <__retarget_lock_acquire_recursive>:
 8003ca0:	4770      	bx	lr

08003ca2 <__retarget_lock_release_recursive>:
 8003ca2:	4770      	bx	lr

08003ca4 <_init>:
 8003ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca6:	bf00      	nop
 8003ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003caa:	bc08      	pop	{r3}
 8003cac:	469e      	mov	lr, r3
 8003cae:	4770      	bx	lr

08003cb0 <_fini>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr
